<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GHSoft.Core</name>
    </assembly>
    <members>
        <member name="T:GHSoft.Actor.Actor`1">
            <summary>
            Actor（做并行开发用的，现在没有用到，与elang语言相似）
            </summary>
            <remarks>
                <para>    Creator：lally</para>
                <para>CreatedTime：2013/1/15 14:27:37</para>
            </remarks>
        </member>
        <member name="T:GHSoft.Core.ObjectBase">
            <summary>
            线程安全对象基础类。
            </summary>
            <remarks>
                <para>    Creator：lally</para>
                <para>CreatedTime：2012/12/5 10:51:39</para>
            </remarks>
        </member>
        <member name="T:GHSoft.Core.IObjectBase">
            <summary>
            对象基础类。
            </summary>
            <remarks>
                <para>    Creator：lally</para>
                <para>CreatedTime：2012/12/5 10:48:53</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Core.IObjectBase.SyncEnter">
            <summary>
            进入同步状态。
            </summary>
        </member>
        <member name="M:GHSoft.Core.IObjectBase.SyncExit">
            <summary>
            离开同步状态。
            </summary>
        </member>
        <member name="P:GHSoft.Core.IObjectBase.GuidKey">
            <summary>
            对象的GUID主键。
            </summary>
        </member>
        <member name="P:GHSoft.Core.IObjectBase.SyncRoot">
            <summary>
            获取一个可用于同步对的访问的对象。
            </summary>
        </member>
        <member name="F:GHSoft.Core.ObjectBase.m_syncRoot">
            <summary>
            SyncRoot 线程锁对象。
            </summary>
        </member>
        <member name="F:GHSoft.Core.ObjectBase.m_while">
            <summary>
            整型 Lock Free 线程锁。
            </summary>
        </member>
        <member name="M:GHSoft.Core.ObjectBase.SyncEnter">
            <summary>
            进入同步状态。
            </summary>
        </member>
        <member name="M:GHSoft.Core.ObjectBase.SyncExit">
            <summary>
            离开同步状态。
            </summary>
        </member>
        <member name="M:GHSoft.Core.ObjectBase.ToString">
            <summary>
            返回表示当前对象的字符串。
            </summary>
            <returns>当前对象的字符串表示形式。</returns>
        </member>
        <member name="P:GHSoft.Core.ObjectBase.GuidKey">
            <summary>
            对象的GUID主键。
            </summary>
        </member>
        <member name="P:GHSoft.Core.ObjectBase.SyncRoot">
            <summary>
            获取一个可用于同步对的访问的对象。
            </summary>
        </member>
        <member name="T:GHSoft.Actor.IActor`1">
            <summary>
            Actor接口。
            </summary>
            <remarks>
                <para>    Creator：lally</para>
                <para>CreatedTime：2013/1/15 14:26:27</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Actor.IActor`1.Send(`0)">
            <summary>
            发送消息。
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:GHSoft.Actor.IActor`1.Reset">
            <summary>
            重置对象。
            </summary>
        </member>
        <member name="P:GHSoft.Actor.IActor`1.Existed">
            <summary>
            执行是否已经退出。
            </summary>
        </member>
        <member name="P:GHSoft.Actor.IActor`1.MessageCount">
            <summary>
            剩余消息数量。
            </summary>
        </member>
        <member name="P:GHSoft.Actor.IActor`1.CurrentStatus">
            <summary>
            获取当前状态。
            </summary>
        </member>
        <member name="M:GHSoft.Actor.Actor`1.ReadyToExecute">
            <summary>
            准备并执行。
            </summary>
        </member>
        <member name="M:GHSoft.Actor.Actor`1.Execute(System.Object)">
            <summary>
            执行。
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:GHSoft.Actor.Actor`1.Exit">
            <summary>
            退出执行。
            </summary>
        </member>
        <member name="M:GHSoft.Actor.Actor`1.Receive(`0)">
            <summary>
            接收消息。
            </summary>
            <param name="message">消息。</param>
        </member>
        <member name="M:GHSoft.Actor.Actor`1.Reset">
            <summary>
            重置对象。
            </summary>
        </member>
        <member name="M:GHSoft.Actor.Actor`1.Send(`0)">
            <summary>
            加入消息。
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:GHSoft.Actor.Actor`1.Queue">
            <summary>
            当前队列对象。
            </summary>
        </member>
        <member name="P:GHSoft.Actor.Actor`1.Existed">
            <summary>
            是否已经退出
            </summary>
        </member>
        <member name="P:GHSoft.Actor.Actor`1.MessageCount">
            <summary>
            消息数量
            </summary>
        </member>
        <member name="P:GHSoft.Actor.Actor`1.CurrentStatus">
            <summary>
            获取当前状态。
            </summary>
        </member>
        <member name="T:GHSoft.Actor.ProcessStatus">
            <summary>
            任务状态
            </summary>
            <remarks>
                <para>    Creator：lally</para>
                <para>CreatedTime：2013/1/15 14:25:37</para>
            </remarks>
        </member>
        <member name="F:GHSoft.Actor.ProcessStatus.Waiting">
            <summary>
            等待状态。
            </summary>
        </member>
        <member name="F:GHSoft.Actor.ProcessStatus.Processing">
            <summary>
            处理状态。
            </summary>
        </member>
        <member name="F:GHSoft.Actor.ProcessStatus.Stopped">
            <summary>
            停止状态。
            </summary>
        </member>
        <member name="T:GHSoft.Attribute.PowerAttribute">
            <summary>
            权限特征
            </summary>
            <remarks>
                <para>    Creator：FRANK-E420</para>
                <para>CreatedTime：2012/7/5 9:54:53</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Attribute.PowerAttribute.#ctor(System.String)">
            <summary>
            权限特征的构造函数
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:GHSoft.Attribute.PowerAttribute.Name">
            <summary>
            权限名称
            </summary>
        </member>
        <member name="T:GHSoft.Caching.GHCache">
            <summary>
            缓存上下文对象。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/23 9:37:48</para>
            </remarks>
        </member>
        <member name="F:GHSoft.Caching.GHCache.m_syncRoot">
            <summary>
            SyncRoot 线程锁对象。
            </summary>
        </member>
        <member name="M:GHSoft.Caching.GHCache.GetProvider(System.String)">
            <summary>
            获取缓存的存储提供者。
            </summary>
            <param name="name">提供者名称。</param>
            <returns>一个用于存储缓存项的 <see cref="T:GHSoft.Caching.ICacheProvider"/>实例。</returns>
        </member>
        <member name="M:GHSoft.Caching.GHCache.Add(System.String,GHSoft.Caching.ICacheProvider)">
            <summary>
            添加一个 <see cref="T:GHSoft.Caching.ICacheProvider"/> 元素到列表中
            </summary>
            <param name="name">缓存体Key</param>
            <param name="cacheProvider">缓存体</param>
        </member>
        <member name="M:GHSoft.Caching.GHCache.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="P:GHSoft.Caching.GHCache.SyncRoot">
            <summary>
            获取一个可用于同步对的访问的对象。
            </summary>
        </member>
        <member name="P:GHSoft.Caching.GHCache.Instance">
            <summary>
            获取实例
            </summary>
        </member>
        <member name="P:GHSoft.Caching.GHCache.Item(System.String)">
            <summary>
            获取缓存提供者
            </summary>
            <param name="key">提供者 Key</param>
            <returns>一个用于存储缓存项的 <see cref="T:GHSoft.Caching.ICacheProvider"/>实例。</returns>
        </member>
        <member name="T:GHSoft.Caching.CacheHandler">
            <summary>
            Cache配置解析器
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/23 9:42:02</para>
            </remarks>
        </member>
        <member name="T:GHSoft.Configuration.SectionBase">
            <summary>
            配置节点分析器基础类。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/17 16:46:16</para>
            </remarks>
        </member>
        <member name="T:GHSoft.Configuration.ISection">
            <summary>
            配置文件内容节点接口
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/17 16:22:49</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Configuration.ISection.Parse(System.Xml.XmlNode)">
            <summary>
            分析XML配置节点内容。
            </summary>
            <param name="node">要分析的配置节点。</param>
            <exception cref="T:GHSoft.Configuration.ConfigException">
            配置内容与解析器不符。
            </exception>
        </member>
        <member name="P:GHSoft.Configuration.ISection.Name">
            <summary>
            配置节点的名称。
            </summary>
        </member>
        <member name="P:GHSoft.Configuration.ISection.FileName">
            <summary>
            配置文件的名称。
            </summary>
        </member>
        <member name="F:GHSoft.Configuration.SectionBase.disposed">
            <summary>
            对象的释放状态。
            </summary>
        </member>
        <member name="M:GHSoft.Configuration.SectionBase.Parse(System.Xml.XmlNode)">
            <summary>
            分析XML配置节点内容。
            </summary>
            <param name="node">要分析的配置节点。</param>
            <exception cref="T:GHSoft.Configuration.ConfigException">
            配置内容与解析器不符。
            </exception>
        </member>
        <member name="M:GHSoft.Configuration.SectionBase.Finalize">
            <summary>
            析构：释放资源。
            </summary>
        </member>
        <member name="M:GHSoft.Configuration.SectionBase.Release(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposed"></param>
        </member>
        <member name="M:GHSoft.Configuration.SectionBase.Dispose">
            <summary>
            IDisposable 释放资源
            </summary>
        </member>
        <member name="P:GHSoft.Configuration.SectionBase.Name">
            <summary>
            配置文件节点的名称。
            </summary>
        </member>
        <member name="P:GHSoft.Configuration.SectionBase.FileName">
            <summary>
            配置文件的名称。
            </summary>
        </member>
        <member name="M:GHSoft.Caching.CacheHandler.Parse(System.Xml.XmlNode)">
            <summary>
            分析节点。
            </summary>
            <param name="node">配置节点</param>
        </member>
        <member name="T:GHSoft.Caching.CacheItem">
            <summary>
            表示一个标准缓存信息。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/20 11:39:14</para>
            </remarks>
        </member>
        <member name="T:GHSoft.Caching.ICacheItem">
            <summary>
            表示标准的缓存项。
            </summary>
            <remarks>
                <para>作    者：訾曉龍</para>
                <para>创建时间：2012/4/20 10:54:56</para>
            </remarks>
        </member>
        <member name="P:GHSoft.Caching.ICacheItem.GUID">
            <summary>
            全球唯一ID。
            </summary>
        </member>
        <member name="P:GHSoft.Caching.ICacheItem.ID">
            <summary>
            ID。
            </summary>
        </member>
        <member name="P:GHSoft.Caching.ICacheItem.Key">
            <summary>
            缓存索引。
            </summary>
        </member>
        <member name="P:GHSoft.Caching.ICacheItem.Status">
            <summary>
            缓存状态。
            </summary>
        </member>
        <member name="P:GHSoft.Caching.ICacheItem.Version">
            <summary>
            缓存版本。
            </summary>
        </member>
        <member name="P:GHSoft.Caching.ICacheItem.LastUpdate">
            <summary>
            最后更新时间。
            </summary>
        </member>
        <member name="P:GHSoft.Caching.ICacheItem.UseCount">
            <summary>
            使用次数。
            </summary>
        </member>
        <member name="P:GHSoft.Caching.ICacheItem.Timeout">
            <summary>
            缓存期限。
            </summary>
        </member>
        <member name="P:GHSoft.Caching.ICacheItem.RecycleCallback">
            <summary>
            丢弃前的回调方法。
            </summary>
        </member>
        <member name="M:GHSoft.Caching.CacheItem.#ctor(System.Object)">
            <summary>
            创建并初始化一个缓存项的实例。
            </summary>
            <param name="key">缓存项的键。</param>
            <exception cref="T:System.ArgumentNullException">
            key 参数为 Null 或 Empty。
            </exception>
        </member>
        <member name="M:GHSoft.Caching.CacheItem.#ctor(System.Object,GHSoft.Caching.RecycleCallback)">
            <summary>
            创建并初始化一个缓存项的实例。
            </summary>
            <param name="key">缓存项的键。</param>
            <param name="callBack">丢弃前的调用的方法。在丢弃前，会调用此方法，直到此方法返回true才会丢弃该缓存项。</param>
            <exception cref="T:System.ArgumentNullException">
            key 参数为 Null 或 Empty。
            </exception>
        </member>
        <member name="M:GHSoft.Caching.CacheItem.#ctor(System.Object,GHSoft.Caching.RecycleCallback,System.TimeSpan)">
            <summary>
            创建并初始化一个缓存项的实例。
            </summary>
            <param name="key">缓存项的键。</param>
            <param name="callBack">丢弃前的调用的方法。在丢弃前，会调用此方法，直到此方法返回true才会丢弃该缓存项。</param>
            <param name="timeout">超时时长，如果某缓存项在该时间内无人访问，Caching会将其丢弃。默认时间为5分钟。</param>
            <exception cref="T:System.ArgumentNullException">
            key 参数为 Null。
            </exception>
        </member>
        <member name="P:GHSoft.Caching.CacheItem.GUID">
            <summary>
            全球唯一ID。
            </summary>
        </member>
        <member name="P:GHSoft.Caching.CacheItem.ID">
            <summary>
            ID。
            </summary>
        </member>
        <member name="P:GHSoft.Caching.CacheItem.Key">
            <summary>
            缓存索引。
            </summary>
        </member>
        <member name="P:GHSoft.Caching.CacheItem.Status">
            <summary>
            缓存状态。
            </summary>
        </member>
        <member name="P:GHSoft.Caching.CacheItem.Version">
            <summary>
            缓存版本。
            </summary>
        </member>
        <member name="P:GHSoft.Caching.CacheItem.LastUpdate">
            <summary>
            最后更新时间。
            </summary>
        </member>
        <member name="P:GHSoft.Caching.CacheItem.UseCount">
            <summary>
            使用次数。
            </summary>
        </member>
        <member name="P:GHSoft.Caching.CacheItem.Timeout">
            <summary>
            超时时长，如果某Cache项在该时间内无人访问，Caching会将其抛弃。默认为无限长。
            </summary>
        </member>
        <member name="P:GHSoft.Caching.CacheItem.RecycleCallback">
            <summary>
            丢弃前的回调方法。
            </summary>
        </member>
        <member name="T:GHSoft.Caching.CacheProviderBase">
            <summary>
            表示一个缓存提供者基础类。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/20 11:56:35</para>
            </remarks>
        </member>
        <member name="T:GHSoft.Caching.ICacheProvider">
             <summary>
            
             </summary>
             <remarks>
                 <para>作    者：Lally</para>
                 <para>创建时间：2012/4/20 11:37:32</para>
             </remarks>
        </member>
        <member name="M:GHSoft.Caching.ICacheProvider.Add(System.Object,System.Object,System.TimeSpan)">
            <summary>
            添加一个缓存项。
            </summary>
            <param name="key">缓存项的键</param>
            <param name="value">缓存项的值</param>
            <param name="timeout">超时时长，如果某 缓存项在该时间内无人访问，Caching会将其丢弃。</param>
        </member>
        <member name="M:GHSoft.Caching.ICacheProvider.Add(System.Object,System.Object,System.TimeSpan,GHSoft.Caching.RecycleCallback)">
            <summary>
            添加一个缓存项。
            </summary>
            <param name="key">缓存项的键</param>
            <param name="value">缓存项的值</param>
            <param name="timeout">超时时长，如果某 缓存项在该时间内无人访问，Caching会将其丢弃。</param>
            <param name="callBack">丢弃时，调用此托管方法，如果此方法返回false，Caching将放弃此次丢弃操作，直到放回true为止。</param>
        </member>
        <member name="M:GHSoft.Caching.ICacheProvider.Discard(System.Object)">
            <summary>
            丢弃某项。
            </summary>
            <param name="key">缓存项的键</param>
        </member>
        <member name="M:GHSoft.Caching.ICacheProvider.LockGet(System.Object)">
            <summary>
            取出缓存项，并将其锁定。
            </summary>
            <param name="key">缓存项的键</param>
            <returns>取出的对象</returns>
        </member>
        <member name="M:GHSoft.Caching.ICacheProvider.GetItem(System.Object)">
            <summary>
            取出缓存项。
            </summary>
            <param name="key">缓存项的键</param>
            <returns>取出的对象</returns>
        </member>
        <member name="M:GHSoft.Caching.ICacheProvider.UnLock(System.Object)">
            <summary>
            解锁相应 缓存项。
            </summary>
            <param name="key">缓存项的键</param>
        </member>
        <member name="P:GHSoft.Caching.ICacheProvider.Timeout">
            <summary>
            默认的超时时间。
            </summary>
        </member>
        <member name="F:GHSoft.Caching.CacheProviderBase.recycleThread">
            <summary>
            后台回收线程
            </summary>
        </member>
        <member name="F:GHSoft.Caching.CacheProviderBase.disposed">
            <summary>
            
            </summary>
        </member>
        <member name="F:GHSoft.Caching.CacheProviderBase.collection">
            <summary>
            列表对象，内部实际的列表存储对象。
            </summary>
        </member>
        <member name="F:GHSoft.Caching.CacheProviderBase.m_syncRoot">
            <summary>
            SyncRoot 线程锁对象。
            </summary>
        </member>
        <member name="M:GHSoft.Caching.CacheProviderBase.CopyTo(System.Array,System.Int32)">
            <summary>
            从特定的数组索引处开始，将列表的元素复制到一个数组中。
            </summary>
            <param name="array">
            作为从列表复制的元素的目标位置的一维 System.Array。
            System.Array必须具有从零开始的索引。
            </param>
            <param name="index">
             array 中从零开始的索引，在此处开始复制。
            </param>
            <exception cref="T:System.ArgumentNullException">array 为 null。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index 小于零。</exception>
            <exception cref="T:System.ArgumentException">
            array 是多维的。
            或 - index 等于或大于 array 的长度。
            或 - 源列表中的元素数目大于从 index 到目标 array 末尾之间的可用空间。
            </exception>
            <exception cref="T:System.ArgumentException">源列表的类型无法自动转换为目标 array 的类型。</exception>
        </member>
        <member name="M:GHSoft.Caching.CacheProviderBase.GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="M:GHSoft.Caching.CacheProviderBase.#ctor">
            <summary>
            创建一个实例
            </summary>
        </member>
        <member name="M:GHSoft.Caching.CacheProviderBase.RecycleCacheItem">
            <summary>
            回收项目
            </summary>
        </member>
        <member name="M:GHSoft.Caching.CacheProviderBase.AddItem(System.Object,System.Object)">
            <summary>
            插入一个 Cache 项目
            </summary>
            <param name="key">Cache键值</param>
            <param name="value">Cache项</param>
            <exception cref="T:System.ArgumentNullException">key 为 null。</exception>
            <exception cref="T:System.ArgumentException">带有相同键的项已经存在于缓存中。</exception>
        </member>
        <member name="M:GHSoft.Caching.CacheProviderBase.DiscardItem(System.Object)">
            <summary>
            抛弃一个 Cache 项目
            </summary>
            <param name="key">Cache键值</param>
            <exception cref="T:System.ArgumentNullException">key 为 null。</exception>
        </member>
        <member name="M:GHSoft.Caching.CacheProviderBase.Add(System.Object,System.Object)">
            <summary>
            添加一个Cache 项。
            </summary>
            <param name="key">Cache 项的键</param>
            <param name="value">Cache 项的值</param>
            <exception cref="T:System.ArgumentNullException">key 为 null。</exception>
            <exception cref="T:System.ArgumentException">带有相同键的项已经存在于缓存中。</exception>
        </member>
        <member name="M:GHSoft.Caching.CacheProviderBase.Add(System.Object,System.Object,System.TimeSpan)">
            <summary>
            添加一个Cache 项。
            </summary>
            <param name="key">Cache 项的键</param>
            <param name="value">Cache 项的值</param>
            <param name="timeout">超时时长，如果某 Cache 项在该时间内无人访问，Caching会将其丢弃。</param>
            <exception cref="T:System.ArgumentNullException">key 为 null。</exception>
            <exception cref="T:System.ArgumentException">带有相同键的项已经存在于缓存中。</exception>
        </member>
        <member name="M:GHSoft.Caching.CacheProviderBase.Add(System.Object,System.Object,System.TimeSpan,GHSoft.Caching.RecycleCallback)">
            <summary>
            添加一个Cache 项。
            </summary>
            <param name="key">Cache 项的键</param>
            <param name="value">Cache 项的值</param>
            <param name="timeout">超时时长，如果某 Cache 项在该时间内无人访问，Caching会将其丢弃。</param>
            <param name="callBack">丢弃时，调用此托管方法，如果此方法返回false，Caching将放弃此次丢弃操作，直到放回true为止。</param>
            <exception cref="T:System.ArgumentNullException">key 为 null。</exception>
            <exception cref="T:System.ArgumentException">带有相同键的项已经存在于缓存中。</exception>
        </member>
        <member name="M:GHSoft.Caching.CacheProviderBase.Contains(System.Object)">
            <summary>
            检查是否存在某项。
            </summary>
            <param name="key">Cache 项的键</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:GHSoft.Caching.CacheProviderBase.Discard(System.Object)">
            <summary>
            丢弃某项。
            </summary>
            <param name="key">Cache 项的键</param>
            <exception cref="T:System.ArgumentNullException">key 为 null。</exception>
        </member>
        <member name="M:GHSoft.Caching.CacheProviderBase.Clear">
            <summary>
            强制将所有 Cache 项清除。
            </summary>
        </member>
        <member name="M:GHSoft.Caching.CacheProviderBase.LockGet(System.Object)">
            <summary>
            取出Cache 项，并将其锁定。
            </summary>
            <param name="key">Cache 项的键</param>
            <returns>取出的对象</returns>
            <exception cref="T:System.ArgumentNullException">key 为 null。</exception>
        </member>
        <member name="M:GHSoft.Caching.CacheProviderBase.GetItem(System.Object)">
            <summary>
            取出Cache 项。
            </summary>
            <param name="key">Cache 项的键</param>
            <returns>取出的对象</returns>
            <exception cref="T:System.ArgumentNullException">key 为 null。</exception>
        </member>
        <member name="M:GHSoft.Caching.CacheProviderBase.LockGet``1(System.Object)">
            <summary>
            取出Cache 项时将其锁定，并转换为指定类型输出。
            </summary>
            <param name="key">Cache 项的键</param>
            <returns>取出的对象</returns>
            <typeparam name="TValue">
            期望得到的值类型，如果不能将值转换为此类型，则返回null；必须是引用类型。
            </typeparam>
            <exception cref="T:System.ArgumentNullException">key 为 null。</exception>
        </member>
        <member name="M:GHSoft.Caching.CacheProviderBase.GetItem``1(System.Object)">
            <summary>
            取出Cache 项，并转换为指定类型输出。
            </summary>
            <param name="key">Cache 项的键</param>
            <returns>取出的对象</returns>
            <typeparam name="TValue">
            期望得到的值类型，如果不能将值转换为此类型，则返回null；必须是引用类型。
            </typeparam>
            <exception cref="T:System.ArgumentNullException">key 为 null。</exception>
        </member>
        <member name="M:GHSoft.Caching.CacheProviderBase.UnLock(System.Object)">
            <summary>
            解锁相应 Cache 项。
            </summary>
            <param name="key">Cache 项的键</param>
            <exception cref="T:System.ArgumentNullException">key 为 null。</exception>
        </member>
        <member name="M:GHSoft.Caching.CacheProviderBase.UseItem(System.Object)">
            <summary>
            使用某项
            </summary>
            <param name="key">Cache 项的键</param>
            <exception cref="T:System.ArgumentNullException">key 为 null。</exception>
        </member>
        <member name="M:GHSoft.Caching.CacheProviderBase.Finalize">
            <summary>
            析构,释放所有资源
            </summary>
        </member>
        <member name="M:GHSoft.Caching.CacheProviderBase.Release(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposed"></param>
        </member>
        <member name="M:GHSoft.Caching.CacheProviderBase.Dispose">
            <summary>
            IDisposable 释放资源
            </summary>
        </member>
        <member name="P:GHSoft.Caching.CacheProviderBase.IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对列表的访问（线程安全）。
            </summary>
        </member>
        <member name="P:GHSoft.Caching.CacheProviderBase.Count">
            <summary>
            获取列表中包含的元素数。
            </summary>
        </member>
        <member name="P:GHSoft.Caching.CacheProviderBase.Item(System.Object)">
            <summary>
            Cache索引器
            </summary>
            <param name="key">Cache键值</param>
            <returns>对象</returns>
            <exception cref="T:System.ArgumentNullException">key 为 null。</exception>
        </member>
        <member name="P:GHSoft.Caching.CacheProviderBase.SyncRoot">
            <summary>
            获取一个可用于同步对的访问的对象。
            </summary>
        </member>
        <member name="P:GHSoft.Caching.CacheProviderBase.Timeout">
            <summary>
            默认的超时时间
            </summary>
        </member>
        <member name="P:GHSoft.Caching.CacheProviderBase.Keys">
            <summary>
            Cache 项的键值集合。
            </summary>
        </member>
        <member name="P:GHSoft.Caching.CacheProviderBase.Values">
            <summary>
            获取 System.Collections.ICollection 对象，它包含缓存对象中的值。
            </summary>
        </member>
        <member name="P:GHSoft.Caching.CacheProviderBase.IsReadOnly">
            <summary>
            是否是只读列表。
            </summary>
        </member>
        <member name="P:GHSoft.Caching.CacheProviderBase.IsFixedSize">
            <summary>
            是否固定大小
            </summary>
        </member>
        <member name="T:GHSoft.Caching.CacheStatus">
            <summary>
            表示缓存状态的类型。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/20 10:57:50</para>
            </remarks>
        </member>
        <member name="F:GHSoft.Caching.CacheStatus.Deleted">
            <summary>
            删除状态
            </summary>
        </member>
        <member name="F:GHSoft.Caching.CacheStatus.Overdue">
            <summary>
            过期状态
            </summary>
        </member>
        <member name="F:GHSoft.Caching.CacheStatus.Locked">
            <summary>
            锁定状态
            </summary>
        </member>
        <member name="F:GHSoft.Caching.CacheStatus.Sync">
            <summary>
            同步状态
            </summary>
        </member>
        <member name="F:GHSoft.Caching.CacheStatus.Normal">
            <summary>
            正常状态
            </summary>
        </member>
        <member name="T:GHSoft.Caching.RecycleCallback">
            <summary>
            回收缓存时激活的方法。
            </summary>
            <param name="key">缓存索引</param>
            <param name="value">缓存内容</param>
            <param name="recycleTime">回收时间</param>
            <returns>是否可以回收</returns>
        </member>
        <member name="T:GHSoft.Caching.MemoryCacheProvider">
            <summary>
            定义一个内存 Cache 存储 提供者。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/20 12:18:11</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Caching.MemoryCacheProvider.AddItem(System.Object,System.Object)">
            <summary>
            插入一个 Cache 项目
            </summary>
            <param name="key">Cache键值</param>
            <param name="value">Cache项</param>
            <exception cref="T:System.ArgumentNullException">key 为 null。</exception>
            <exception cref="T:System.ArgumentException">带有相同键的项已经存在于缓存中。</exception>
        </member>
        <member name="M:GHSoft.Caching.MemoryCacheProvider.DiscardItem(System.Object)">
            <summary>
            抛弃一个 Cache 项目
            </summary>
            <param name="key">Cache键值</param>
            <exception cref="T:System.ArgumentNullException">key 为 null。</exception>
        </member>
        <member name="M:GHSoft.Caching.MemoryCacheProvider.Release(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposed"></param>
        </member>
        <member name="P:GHSoft.Caching.MemoryCacheProvider.Item(System.Object)">
            <summary>
            Cache索引器
            </summary>
            <param name="key">Cache键值</param>
            <returns>对象</returns>
            <exception cref="T:System.ArgumentNullException">key 为 null。</exception>
        </member>
        <member name="T:GHSoft.Collections.GHDictionaryBase">
            <summary>
            （线程安全的）字典容器抽象基础类。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/5/17 10:51:11</para>
            </remarks>
        </member>
        <member name="F:GHSoft.Collections.GHDictionaryBase.Dictionary">
            <summary>
            字典存储对象。
            </summary>
        </member>
        <member name="M:GHSoft.Collections.GHDictionaryBase.Add(System.Object,System.Object)">
            <summary>
            将带有指定键和值的项添加到字典中。
            </summary>
            <param name="key">要添加的项的键。</param>
            <param name="value">要添加的项的值。该值可以为 null。</param>
            <exception cref="T:System.ArgumentNullException">
            key 为 null。
            </exception>
            <exception cref="T:System.ArgumentException">
            带有相同键的项已经存在于字典中。
            </exception>
        </member>
        <member name="M:GHSoft.Collections.GHDictionaryBase.Clear">
            <summary>
            从字典中移除所有项。
            </summary>
        </member>
        <member name="M:GHSoft.Collections.GHDictionaryBase.Contains(System.Object)">
            <summary>
            确定字典是否包含特定键。
            </summary>
            <param name="key">要在字典中定位的键。</param>
            <returns>
            如果字典包含带有指定键的项，则为 true；
            否则为false。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            key 为 null。
            </exception>
        </member>
        <member name="M:GHSoft.Collections.GHDictionaryBase.GetEnumerator">
            <summary>
            返回循环访问字典的 <see cref="T:System.Collections.IDictionaryEnumerator"/>。
            </summary>
            <returns>
            用于字典的 <see cref="T:System.Collections.IDictionaryEnumerator"/>。
            </returns>
        </member>
        <member name="M:GHSoft.Collections.GHDictionaryBase.Remove(System.Object)">
            <summary>
            从字典中移除带有指定键的项。
            </summary>
            <param name="key">要移除的项的键。</param>
            <exception cref="T:System.ArgumentNullException">
            key 为 null。
            </exception>
        </member>
        <member name="M:GHSoft.Collections.GHDictionaryBase.CopyTo(System.Array,System.Int32)">
            <summary>
            将字典项复制到位于指定索引处的一维 <see cref="T:System.Array"/> 实例中。
            </summary>
            <param name="array">
            一维 <see cref="T:System.Array"/>，它是从字典中复制的 <see cref="T:System.Collections.DictionaryEntry"/>对象的目标位置。
            <see cref="T:System.Array"/> 必须具有从零开始的索引。
            </param>
            <param name="index">
            array 中从零开始的索引，将在此处开始复制。
            </param>
            <exception cref="T:System.ArgumentNullException">
            array 为 null。
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index 小于零。
            </exception>
            <exception cref="T:System.ArgumentException">
            array 是多维数组。- 或 -源字典中的元素数大于从
            arrayIndex 到目标 array 结尾处之间的可用空间。
            </exception>
        </member>
        <member name="M:GHSoft.Collections.GHDictionaryBase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举器。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="P:GHSoft.Collections.GHDictionaryBase.IsFixedSize">
            <summary>
            获取一个值，该值指示字典是否具有固定大小。
            </summary>
            <return>该属性总是返回 false。</return>
        </member>
        <member name="P:GHSoft.Collections.GHDictionaryBase.IsReadOnly">
            <summary>
            获取一个值，该值指示字典是否为只读。
            </summary>
            <return>该属性总是返回 false。</return>
        </member>
        <member name="P:GHSoft.Collections.GHDictionaryBase.Keys">
            <summary>
            获取包含字典中的键的 <see cref="T:System.Collections.ICollection"/>。
            </summary>
            <return>
            包含字典中的键的 <see cref="T:System.Collections.ICollection"/>。
            </return>
        </member>
        <member name="P:GHSoft.Collections.GHDictionaryBase.Values">
            <summary>
            获取包含字典中的值的 <see cref="T:System.Collections.ICollection"/>。
            </summary>
            <return>
            一个 <see cref="T:System.Collections.ICollection"/>，它包含字典中的值。
            </return>
        </member>
        <member name="P:GHSoft.Collections.GHDictionaryBase.Item(System.Object)">
            <summary>
            获取或设置与指定的键相关联的值。
            </summary>
            <param name="key">要获取或设置其值的键。</param>
            <returns>
            与指定的键相关联的值。如果未找到指定的键，尝试获取它将返回 null，尝试设置它将使用指定的键创建新项。
            </returns>
            <exception cref="T:System.ArgumentNullException">
            key 为 null。
            </exception>
        </member>
        <member name="P:GHSoft.Collections.GHDictionaryBase.Count">
            <summary>
            获取包含在字典中的键/值对的数目。
            </summary>
            <returns>
            包含在字典中的键/值对的数目。
            检索此属性的值的运算复杂度为O(1)。
            </returns>
        </member>
        <member name="P:GHSoft.Collections.GHDictionaryBase.IsSynchronized">
            <summary>
            获取一个值，该值指示字典是否是同步的（线程安全）。
            </summary>
            <returns>
            该属性总是返回 true。
            </returns>
        </member>
        <member name="P:GHSoft.Collections.GHDictionaryBase.SyncRoot">
            <summary>
            获取可用于同步字典访问的对象。
            </summary>
            <returns>
            可用于同步对字典的访问的对象。
            </returns>
        </member>
        <member name="T:GHSoft.Collections.GHHybridDictionary">
            <summary>
            在集合较小时，使用 ListDictionary 来实现 IDictionary，然后当集合变大时，切换到 Hashtable。
            -- 此类是线程安全的。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/5/17 10:53:01</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Collections.GHHybridDictionary.#ctor">
            <summary>
            创建区分大小写的空白 <see cref="T:GHSoft.Collections.GHHybridDictionary"/>。
            </summary>
        </member>
        <member name="M:GHSoft.Collections.GHHybridDictionary.#ctor(System.Boolean)">
            <summary>
            创建使用指定的大小写规则的空白 <see cref="T:GHSoft.Collections.GHHybridDictionary"/>。
            </summary>
            <param name="caseInsensitive">
            一个布尔值，它表示 <see cref="T:GHSoft.Collections.GHHybridDictionary"/> 是否不区分大小写。
            </param>
        </member>
        <member name="M:GHSoft.Collections.GHHybridDictionary.#ctor(System.Int32)">
            <summary>
            创建具有指定的初始大小且区分大小写的 <see cref="T:GHSoft.Collections.GHHybridDictionary"/>。
            </summary>
            <param name="size">
            <see cref="T:GHSoft.Collections.GHHybridDictionary"/> 最初可包含的大概项数。
            </param>
        </member>
        <member name="M:GHSoft.Collections.GHHybridDictionary.#ctor(System.Int32,System.Boolean)">
            <summary>
            创建具有指定的初始大小和大小写规则的 <see cref="T:GHSoft.Collections.GHHybridDictionary"/>。
            </summary>
            <param name="size">
            <see cref="T:GHSoft.Collections.GHHybridDictionary"/> 最初可包含的大概项数。
            </param>
            <param name="caseInsensitive">
            一个布尔值，它表示 <see cref="T:GHSoft.Collections.GHHybridDictionary"/> 是否不区分大小写。
            </param>
        </member>
        <member name="T:GHSoft.Collections.GHListDictionary">
            <summary>
            使用单链接列表实现 IDictionary。 建议用于通常包含 10 个或 10 个以下项的集合。
            -- 此类是线程安全的。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>修改时间：2012/05/15 01:17:59</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Collections.GHListDictionary.#ctor">
            <summary>
            使用默认比较器创建空白 <see cref="T:GHSoft.Collections.GHListDictionary"/>。
            </summary>
        </member>
        <member name="M:GHSoft.Collections.GHListDictionary.#ctor(System.Collections.IComparer)">
            <summary>
            使用指定比较器创建空白 <see cref="T:GHSoft.Collections.GHListDictionary"/>。
            </summary>
            <param name="comparer">
            <see cref="T:System.Collections.IComparer"/>，用于确定两个键是否相等。
            - 或 -null，使用默认比较器，该比较器是每一个键的 <see cref="M:System.Object.Equals(System.Object)"/> 实现。
            </param>
        </member>
        <member name="T:GHSoft.Collections.SerializableDictionary`2">
            <summary>
            支持XML序列化的泛型Dictionary类 
            </summary>
            <remarks>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
                <para>    Creator：GORSON</para>
                <para>CreatedTime：2012-8-6 11:27:48</para>
            </remarks>       
        </member>
        <member name="M:GHSoft.Collections.SerializableDictionary`2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:GHSoft.Collections.SerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:GHSoft.Collections.SerializableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:GHSoft.Collections.SerializableDictionary`2.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:GHSoft.Collections.SerializableDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            
            </summary>
            <param name="capacity"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:GHSoft.Collections.SerializableDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:GHSoft.Collections.SerializableDictionary`2.GetSchema">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Collections.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            从对象的XML表示形式生成该对象
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:GHSoft.Collections.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            将对象转换为其XML表示形式
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:GHSoft.Configuration.AppSettingConfigHelper">
            <summary>
            获取AppSetting信息辅助类
            </summary>
            <remarks>
                <para>    Creator：GORSON</para>
                <para>CreatedTime：2012-5-13 20:41:46</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Configuration.AppSettingConfigHelper.#ctor">
            <summary>
            AppSettingConfigHelper的构造函数
            </summary>
        </member>
        <member name="F:GHSoft.Configuration.AppSettingConfigHelper.AppSettings">
            <summary>
             web.config/AppSetting/配置信息
            </summary>
        </member>
        <member name="M:GHSoft.Configuration.AppSettingConfigHelper.InitAppSettings">
            <summary>
            初始化AppSettings
            </summary>
        </member>
        <member name="M:GHSoft.Configuration.AppSettingConfigHelper.GetValueByKey(System.String,System.Boolean)">
            <summary>
            获取在AppSettings中指定的Key的值，如果不存在此Key，则返回空值
            </summary>
            <param name="appSettingKey">AppSetting中的Key值</param>
            <param name="isPath">是否为文件路径的节点</param>
            <returns>返回AppSetting节点的值，如果是路径，返回物理路径</returns>
        </member>
        <member name="M:GHSoft.Configuration.AppSettingConfigHelper.GetPathAtApplication(System.String)">
            <summary>
            获得目录的物理路径
            </summary>
            <param name="spath"></param>
            <returns></returns>
        </member>
        <member name="F:GHSoft.Configuration.AppSettingConfigHelper._applicationRootDir">
            <summary>
            应用程序根目录
            </summary>
        </member>
        <member name="M:GHSoft.Configuration.AppSettingConfigHelper.GetApplicationRootDir">
            <summary>
            获得应用程序根目录
            </summary>
            <returns></returns>
        </member>
        <member name="T:GHSoft.Configuration.ISetting">
            <summary>
            设置信息接口
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/18 15:31:39</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Configuration.ISetting.Add(System.String,System.String)">
            <summary>
            添加设置
            </summary>
            <param name="key">关键字</param>
            <param name="value">设置值</param>
        </member>
        <member name="M:GHSoft.Configuration.ISetting.Clear">
            <summary>
            清除所有内容
            </summary>
        </member>
        <member name="M:GHSoft.Configuration.ISetting.Contains(System.String)">
            <summary>
            检测是否存在给出设置项
            </summary>
            <param name="key">关键字</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:GHSoft.Configuration.ISetting.Remove(System.String)">
            <summary>
            移除设置
            </summary>
            <param name="key">关键字</param>
        </member>
        <member name="P:GHSoft.Configuration.ISetting.ConfigFile">
            <summary>
            配置文件名
            </summary>
        </member>
        <member name="P:GHSoft.Configuration.ISetting.Keys">
            <summary>
            设置的键集合
            </summary>
        </member>
        <member name="P:GHSoft.Configuration.ISetting.Item(System.String)">
            <summary>
            获取设置成员
            </summary>
            <param name="key">关键字</param>
            <returns>设置值</returns>
        </member>
        <member name="T:GHSoft.GHAppContext">
            <summary>
            GHSoft 应用程序全局上下文对象
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/18 16:21:11</para>
            </remarks>
        </member>
        <member name="F:GHSoft.GHAppContext.m_setting">
            <summary>
            Application 的默认设置存储对象
            </summary>
        </member>
        <member name="F:GHSoft.GHAppContext.m_config">
            <summary>
            Application 的默认配置管理对象
            </summary>
        </member>
        <member name="F:GHSoft.GHAppContext.m_serial">
            <summary>
            Application 的默认序号管理对象
            </summary>
        </member>
        <member name="F:GHSoft.GHAppContext.m_logging">
            <summary>
            Application 的默认日志管理对象
            </summary>
        </member>
        <member name="M:GHSoft.GHAppContext.#ctor">
            <summary>
            创建并初始化一个
            </summary>
        </member>
        <member name="M:GHSoft.GHAppContext.InitDefaultSection">
            <summary>
            初始化默认Section解析器。
            </summary>
        </member>
        <member name="M:GHSoft.GHAppContext.CreateSerialService(System.String,System.String,System.String)">
            <summary>
            创建默认序号生成器
            </summary>
            <param name="name">序号生成器名称</param>
            <param name="target">序号生成器目标</param>
            <param name="stype">序号生成器类型</param>
            <returns><see cref="T:GHSoft.Serials.ISerialService"/>，具有默认规则的序号生成器对象。</returns>
        </member>
        <member name="M:GHSoft.GHAppContext.InitDefaultConfig">
            <summary>
            初始化默认配置。
            </summary>
        </member>
        <member name="M:GHSoft.GHAppContext.config_OnLoadComplete">
            <summary>
            配置文件加载完成事件。
            </summary>
        </member>
        <member name="M:GHSoft.GHAppContext.config_OnParseComplete">
            <summary>
            配置文件解析完成事件。
            </summary>
        </member>
        <member name="M:GHSoft.GHAppContext.Initialize(System.String)">
            <summary>
            初始化应用程序环境
            </summary>
            <param name="fname"></param>
        </member>
        <member name="P:GHSoft.GHAppContext.Instance">
            <summary>
            唯一的实例
            </summary>
        </member>
        <member name="P:GHSoft.GHAppContext.ConfigFile">
            <summary>
            应用程序配置文件名
            </summary>
        </member>
        <member name="P:GHSoft.GHAppContext.Setting">
            <summary>
            Application 的默认设置存储对象
            </summary>
        </member>
        <member name="P:GHSoft.GHAppContext.Config">
            <summary>
            Application 的默认配置管理对象
            </summary>
        </member>
        <member name="P:GHSoft.GHAppContext.Serial">
            <summary>
            Application 的默认序号管理对象
            </summary>
        </member>
        <member name="P:GHSoft.GHAppContext.Logging">
            <summary>
            Application 的默认日志管理对象
            </summary>
        </member>
        <member name="E:GHSoft.GHAppContext.OnInitializeStart">
            <summary>
            <see cref="T:GHSoft.EventCallback"/>，初始化开始事件
            </summary>
        </member>
        <member name="E:GHSoft.GHAppContext.OnInitializeComplete">
            <summary>
            <see cref="T:GHSoft.EventCallback"/>，初始化完成事件。
            </summary>
        </member>
        <member name="T:GHSoft.Configuration.ConfigBase">
            <summary>
            用于解析配置。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/18 10:50:34</para>
            </remarks>
        </member>
        <member name="F:GHSoft.Configuration.ConfigBase.m_hdCache">
            <summary>
            SectionGroup 缓存容器
            </summary>
        </member>
        <member name="F:GHSoft.Configuration.ConfigBase.document">
            <summary>
            XML文档对象
            </summary>
        </member>
        <member name="M:GHSoft.Configuration.ConfigBase.ParseXmlGroup(System.Xml.XmlNode)">
            <summary>
            分析XML的组节点，根据Section类型创建相应对象。
            </summary>
            <param name="node">Section节点。</param>
        </member>
        <member name="M:GHSoft.Configuration.ConfigBase.ParseXml(System.Xml.XmlNode)">
            <summary>
            解析XML。
            </summary>
            <param name="node">XML节点</param>
        </member>
        <member name="M:GHSoft.Configuration.ConfigBase.getGroup(System.String)">
            <summary>
            获取指定名称的节点解析器实例。
            </summary>
            <param name="sName">节点解析器名称。</param>
            <returns><see cref="T:GHSoft.Configuration.SectionGroup"/>，节点解析器。</returns>
        </member>
        <member name="M:GHSoft.Configuration.ConfigBase.addGroup(GHSoft.Configuration.SectionGroup)">
            <summary>
            添加一个 Section 节点
            </summary>
            <param name="group">节点处理对象</param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Configuration.ConfigBase.LoadFile(System.String)">
            <summary>
            载入并分析一个XML配置文件
            </summary>
            <param name="xmlFile">XML文件名</param>
        </member>
        <member name="M:GHSoft.Configuration.ConfigBase.LoadString(System.String)">
            <summary>
            载入并分析一个XML字符串
            </summary>
            <param name="xmlText">XML字符串</param>
        </member>
        <member name="M:GHSoft.Configuration.ConfigBase.Parse">
            <summary>
            解析配置
            </summary>
        </member>
        <member name="P:GHSoft.Configuration.ConfigBase.SectionGroupList">
            <summary>
            获取包含的所有SectionGroup对象。
            </summary>
        </member>
        <member name="P:GHSoft.Configuration.ConfigBase.Count">
            <summary>
            获取包含的SectionGroup数量
            </summary>
        </member>
        <member name="P:GHSoft.Configuration.ConfigBase.Item(System.String)">
            <summary>
            获取指定名称的节点解析器组。
            </summary>
            <param name="sName">节点解析器组名称。</param>
            <returns><see cref="T:GHSoft.Configuration.SectionGroup"/>，节点解析器组。</returns>
        </member>
        <member name="P:GHSoft.Configuration.ConfigBase.ConfigFile">
            <summary>
            配置文件
            </summary>
        </member>
        <member name="E:GHSoft.Configuration.ConfigBase.OnLoadComplete">
            <summary>
            <see cref="T:GHSoft.EventCallback"/>，数据加载完成事件。
            </summary>
        </member>
        <member name="E:GHSoft.Configuration.ConfigBase.OnParseComplete">
            <summary>
            <see cref="T:GHSoft.EventCallback"/>，配置解析完成事件。
            </summary>
        </member>
        <member name="T:GHSoft.Configuration.ConfigException">
            <summary>
            表示一个配置信息引发的错误。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/17 17:03:28</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Configuration.ConfigException.#ctor">
            <summary>
            初始化 ConfigException 类的新实例。
            </summary>
        </member>
        <member name="M:GHSoft.Configuration.ConfigException.#ctor(System.String)">
            <summary>
            使用指定的错误消息初始化 ConfigException 类的新实例。
            </summary>
            <param name="message">解释异常原因的错误消息。</param>
        </member>
        <member name="M:GHSoft.Configuration.ConfigException.#ctor(System.String,System.String)">
            <summary>
            使用指定的错误消息初始化 ConfigException 类的新实例。
            </summary>
            <param name="file">出错的文件名称。</param>
            <param name="message">解释异常原因的错误消息。</param>
        </member>
        <member name="M:GHSoft.Configuration.ConfigException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 ConfigException 类的新实例。
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/>，它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/>，它包含有关源或目标的上下文信息。</param>
            <exception cref="T:System.ArgumentNullException">
            info 参数为 null。
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            类名为 null 或 System.Exception.HResult 为零 (0)。
            </exception>
        </member>
        <member name="M:GHSoft.Configuration.ConfigException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 ConfigException 类的新实例。
            </summary>
            <param name="message">解释异常原因的错误消息。</param>
            <param name="innerException">
            导致当前异常的异常；如果未指定内部异常，则是一个 null 引用。
            </param>
        </member>
        <member name="M:GHSoft.Configuration.ConfigException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 ConfigException 类的新实例。
            </summary>
            <param name="file">出错的文件名称。</param>
            <param name="message">解释异常原因的错误消息。</param>
            <param name="innerException">
            导致当前异常的异常；如果未指定内部异常，则是一个 null 引用。
            </param>
        </member>
        <member name="P:GHSoft.Configuration.ConfigException.FileName">
            <summary>
            配置文件的名称。
            </summary>
        </member>
        <member name="T:GHSoft.Configuration.GHConfig">
            <summary>
            默认的配置文件解析类
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/18 15:34:47</para>
            </remarks>
        </member>
        <member name="P:GHSoft.Configuration.GHConfig.Instance">
            <summary>
            唯一的实例
            </summary>
        </member>
        <member name="T:GHSoft.Configuration.GHSettingHandler">
            <summary>
            应用设置Section解析器。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/18 15:41:50</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Configuration.GHSettingHandler.Parse(System.Xml.XmlNode)">
            <summary>
            分析节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:GHSoft.Configuration.GHSetting">
            <summary>
            
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/18 15:37:32</para>
            </remarks>
        </member>
        <member name="T:GHSoft.Configuration.SettingBase">
            <summary>
            设置信息基础类
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/18 15:31:39</para>
            </remarks>
        </member>
        <member name="F:GHSoft.Configuration.SettingBase.m_syncRoot">
            <summary>
            SyncRoot 线程锁对象。
            </summary>
        </member>
        <member name="M:GHSoft.Configuration.SettingBase.Add(System.String,System.String)">
            <summary>
            添加设置
            </summary>
            <param name="key">关键字</param>
            <param name="value">设置值</param>
        </member>
        <member name="M:GHSoft.Configuration.SettingBase.Remove(System.String)">
            <summary>
            移除设置
            </summary>
            <param name="key">关键字</param>
        </member>
        <member name="M:GHSoft.Configuration.SettingBase.Contains(System.String)">
            <summary>
            检测是否存在给出设置项
            </summary>
            <param name="key">关键字</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:GHSoft.Configuration.SettingBase.Clear">
            <summary>
            清除所有内容
            </summary>
        </member>
        <member name="P:GHSoft.Configuration.SettingBase.ConfigFile">
            <summary>
            配置文件名
            </summary>
        </member>
        <member name="P:GHSoft.Configuration.SettingBase.Keys">
            <summary>
            设置的键集合
            </summary>
        </member>
        <member name="P:GHSoft.Configuration.SettingBase.SyncRoot">
            <summary>
            获取一个可用于同步对的访问的对象。
            </summary>
        </member>
        <member name="P:GHSoft.Configuration.SettingBase.Item(System.String)">
            <summary>
            获取设置成员
            </summary>
            <param name="key">关键字</param>
            <returns>设置值</returns>
        </member>
        <member name="P:GHSoft.Configuration.GHSetting.Instance">
            <summary>
            获取唯一实例
            </summary>
        </member>
        <member name="T:GHSoft.Configuration.SectionGroup">
            <summary>
            表示一个配置文件的分组。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/17 17:38:07</para>
            </remarks>
        </member>
        <member name="F:GHSoft.Configuration.SectionGroup.m_hdCache">
            <summary>
            Section 缓存容器
            </summary>
        </member>
        <member name="M:GHSoft.Configuration.SectionGroup.#ctor(System.String)">
            <summary>
            初始化 SectionGroup 类的新实例。
            </summary>
            <param name="sName">分组名称。</param>
        </member>
        <member name="M:GHSoft.Configuration.SectionGroup.getSection(System.String)">
            <summary>
            获取指定名称的节点解析器实例。
            </summary>
            <param name="sName">节点解析器名称。</param>
            <returns><see cref="T:GHSoft.Configuration.ISection"/>，节点解析器。</returns>
        </member>
        <member name="M:GHSoft.Configuration.SectionGroup.addSection(GHSoft.Configuration.ISection)">
            <summary>
            添加一个 Section 节点
            </summary>
            <param name="section">节点处理对象</param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Configuration.SectionGroup.Parse(System.Xml.XmlNode)">
            <summary>
            分析XML配置节点内容
            </summary>
            <param name="node">要分析的配置节点</param>
            <exception cref="T:GHSoft.Configuration.ConfigException">
            配置内容与解析器不符。
            </exception>
        </member>
        <member name="M:GHSoft.Configuration.SectionGroup.Release(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposed"></param>
        </member>
        <member name="P:GHSoft.Configuration.SectionGroup.Sections">
            <summary>
            获取包含的所有Section节点
            </summary>
        </member>
        <member name="P:GHSoft.Configuration.SectionGroup.Count">
            <summary>
            获取包含的Section节点数量
            </summary>
        </member>
        <member name="P:GHSoft.Configuration.SectionGroup.Item(System.String)">
            <summary>
            获取指定名称的节点解析器实例。
            </summary>
            <param name="sName">节点解析器名称。</param>
            <returns><see cref="T:GHSoft.Configuration.ISection"/>，节点解析器。</returns>
        </member>
        <member name="T:GHSoft.EventCallback">
            <summary>
            通用事件回调方法。
            </summary>
        </member>
        <member name="T:GHSoft.IModelInitialize">
            <summary>
            模块初始化接口
            </summary>
            <remarks>
                <para>    Creator：lally</para>
                <para>CreatedTime：2012/8/20 9:44:40</para>
            </remarks>
        </member>
        <member name="T:GHSoft.Event.IEventDispatcher">
            <summary>
            IEventDispatcher 接口定义用于添加或删除事件侦听器的方法，
            检查是否已注册特定类型的事件侦听器，并调度事件。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/5/8 15:58:38</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Event.IEventDispatcher.AddEventListener(System.Object,GHSoft.Event.EventCallback)">
            <summary>
            使用 <see cref="T:GHSoft.Event.IEventDispatcher"/> 对象注册事件侦听器对象，以使侦听器能够接收事件通知。
            </summary>
            <param name="strType">如果成功调度了事件，则值为 true。</param>
            <param name="listener">处理事件的侦听器委托方法。</param>
        </member>
        <member name="M:GHSoft.Event.IEventDispatcher.DispatchEvent(GHSoft.Event.IEvent)">
            <summary>
            将事件调度到事件流中。
            </summary>
            <param name="eventObj">调度到事件流中的 <see cref="T:GHSoft.Event.IEvent"/> 对象。</param>
            <returns>如果成功调度了事件，则值为 true。</returns>
        </member>
        <member name="M:GHSoft.Event.IEventDispatcher.DispatchEvent(GHSoft.Event.IEvent,System.AsyncCallback,System.Object)">
            <summary>
            执行异步派发。
            </summary>
            <param name="eventObj">调度到事件流中的 <see cref="T:GHSoft.Event.IEvent"/> 对象。</param>
            <param name="async">异步操作完成时调用的方法委托。</param>
            <param name="obj"></param>
            <returns>如果成功调度了事件，则值为 true。</returns>
        </member>
        <member name="M:GHSoft.Event.IEventDispatcher.ContainsEvent(System.Object)">
            <summary>
            检查 <see cref="T:GHSoft.Event.IEventDispatcher"/> 对象是否为特定事件类型注册了任何侦听器。
            </summary>
            <param name="strType">事件的类型。</param>
            <returns>如果指定类型的侦听器已注册，则值为 true；否则，值为 false。</returns>
        </member>
        <member name="M:GHSoft.Event.IEventDispatcher.RemoveEvent(System.Object,GHSoft.Event.EventCallback)">
            <summary>
            从 <see cref="T:GHSoft.Event.IEventDispatcher"/> 对象中删除侦听器。
            </summary>
            <param name="strType">事件的类型。</param>
            <param name="listener">处理事件的侦听器委托方法。</param>
        </member>
        <member name="M:GHSoft.Event.IEventDispatcher.RemoveAllEvent(System.Object)">
            <summary>
            从 <see cref="T:GHSoft.Event.IEventDispatcher"/> 对象中删除所有侦听器。
            </summary>
            <param name="strType">事件的类型。</param>
        </member>
        <member name="M:GHSoft.IModelInitialize.Initialize(System.Object[])">
            <summary>
            初始化方法。
            </summary>
            <param name="args">可选参数列表。</param>
            <returns>是否初始化成功。</returns>
        </member>
        <member name="T:GHSoft.InitEvent">
            <summary>
            初始化事件。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>修改时间：2012/8/20 9:55:27</para>
            </remarks>
        </member>
        <member name="T:GHSoft.Event.Event">
            <summary>
            表示一个事件对象。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/5/8 16:06:20</para>
            </remarks>
        </member>
        <member name="T:GHSoft.Event.IEvent">
            <summary>
            表示一个事件对象。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/5/8 16:07:19</para>
            </remarks>
        </member>
        <member name="P:GHSoft.Event.IEvent.EventKey">
            <summary>
            事件的标识。
            </summary>
        </member>
        <member name="P:GHSoft.Event.IEvent.EventType">
            <summary>
            事件的类型。
            </summary>
        </member>
        <member name="P:GHSoft.Event.IEvent.Target">
            <summary>
            事件的目标。
            </summary>
        </member>
        <member name="P:GHSoft.Event.IEvent.Data">
            <summary>
            事件的数据内容。
            </summary>
        </member>
        <member name="M:GHSoft.Event.Event.#ctor(System.Object,System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="objType">事件的类型</param>
            <param name="strKey"></param>
            <param name="oData"></param>
        </member>
        <member name="P:GHSoft.Event.Event.EventKey">
            <summary>
            事件的标识。
            </summary>
        </member>
        <member name="P:GHSoft.Event.Event.EventType">
            <summary>
            事件的类型。
            </summary>
        </member>
        <member name="P:GHSoft.Event.Event.Target">
            <summary>
            事件目标。
            </summary>
        </member>
        <member name="P:GHSoft.Event.Event.Data">
            <summary>
            事件的数据内容。
            </summary>
        </member>
        <member name="F:GHSoft.InitEvent.Initializing">
            <summary>
            初始化开始
            </summary>
        </member>
        <member name="F:GHSoft.InitEvent.Initialized">
            <summary>
            初始化完成
            </summary>
        </member>
        <member name="M:GHSoft.InitEvent.#ctor(System.Object,System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="objType"></param>
            <param name="strKey"></param>
            <param name="oData"></param>
        </member>
        <member name="T:GHSoft.ModelInitialize">
            <summary>
            模块初始化抽象基础类。(ESB初始化子系统的数据库)
            </summary>
            <remarks>
                <para>    Creator：lally</para>
                <para>CreatedTime：2012/8/20 9:49:39</para>
            </remarks>
        </member>
        <member name="T:GHSoft.Event.EventDispatcher">
            <summary>
            
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/5/8 16:55:54</para>
            </remarks>
        </member>
        <member name="F:GHSoft.Event.EventDispatcher.listenerCache">
            <summary>
            监听器缓存。
            </summary>
        </member>
        <member name="F:GHSoft.Event.EventDispatcher.disposed">
            <summary>
            
            </summary>
        </member>
        <member name="M:GHSoft.Event.EventDispatcher.Finalize">
            <summary>
            析构,释放所有资源
            </summary>
        </member>
        <member name="M:GHSoft.Event.EventDispatcher.Release(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposed"></param>
        </member>
        <member name="M:GHSoft.Event.EventDispatcher.Dispose">
            <summary>
            IDisposable 释放资源
            </summary>
        </member>
        <member name="M:GHSoft.Event.EventDispatcher.AddEventListener(System.Object,GHSoft.Event.EventCallback)">
            <summary>
            使用 <see cref="T:GHSoft.Event.IEventDispatcher"/> 对象注册事件侦听器对象，以使侦听器能够接收事件通知。
            </summary>
            <param name="strType">如果成功调度了事件，则值为 true。</param>
            <param name="listener">处理事件的侦听器委托方法。</param>
        </member>
        <member name="M:GHSoft.Event.EventDispatcher.DispatchEvent(GHSoft.Event.IEvent)">
            <summary>
            将事件调度到事件流中。
            </summary>
            <param name="eventObj">调度到事件流中的 <see cref="T:GHSoft.Event.IEvent"/> 对象。</param>
            <returns>如果成功调度了事件，则值为 true。</returns>
        </member>
        <member name="M:GHSoft.Event.EventDispatcher.DispatchEvent(GHSoft.Event.IEvent,System.AsyncCallback,System.Object)">
            <summary>
            执行异步派发。
            </summary>
            <param name="eventObj">调度到事件流中的 <see cref="T:GHSoft.Event.IEvent"/> 对象。</param>
            <param name="async">异步操作完成时调用的方法委托。</param>
            <param name="obj"></param>
            <returns>如果成功调度了事件，则值为 true。</returns>
        </member>
        <member name="M:GHSoft.Event.EventDispatcher.ContainsEvent(System.Object)">
            <summary>
            检查 <see cref="T:GHSoft.Event.IEventDispatcher"/> 对象是否为特定事件类型注册了任何侦听器。
            </summary>
            <param name="strType">事件的类型。</param>
            <returns>如果指定类型的侦听器已注册，则值为 true；否则，值为 false。</returns>
        </member>
        <member name="M:GHSoft.Event.EventDispatcher.RemoveEvent(System.Object,GHSoft.Event.EventCallback)">
            <summary>
            从 <see cref="T:GHSoft.Event.IEventDispatcher"/> 对象中删除侦听器。
            </summary>
            <param name="strType">事件的类型。</param>
            <param name="listener">处理事件的侦听器委托方法。</param>
        </member>
        <member name="M:GHSoft.Event.EventDispatcher.RemoveAllEvent(System.Object)">
            <summary>
            从 <see cref="T:GHSoft.Event.IEventDispatcher"/> 对象中删除所有侦听器。
            </summary>
            <param name="strType">事件的类型。</param>
        </member>
        <member name="M:GHSoft.ModelInitialize.Initialize(System.Object[])">
            <summary>
            初始化方法。
            </summary>
            <param name="args">可选参数列表。</param>
            <returns>是否初始化成功。</returns>
        </member>
        <member name="T:GHSoft.Event.EventCallback">
            <summary>
            处理事件的侦听器委托方法。
            </summary>
            <param name="eventObj">调度到事件流中的 <see cref="T:GHSoft.Event.IEvent"/> 对象。</param>
        </member>
        <member name="T:GHSoft.Extension.ArrayExtension">
            <summary>
            数组扩展方法。
            </summary>
            <remarks>
                <para>作    者：陈文军</para>
                <para>创建时间：2012/4/27 14:16:44</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Extension.ArrayExtension.Clear(System.Array)">
            <summary>
            将数组中的所有元素设置为0、false或null，具体取决与元素类型
            </summary>
            <param name="Array">待清除的数组</param>
            <returns>清除后的数组</returns>
        </member>
        <member name="M:GHSoft.Extension.ArrayExtension.Clear``1(``0[])">
            <summary>
            将数组中的所有元素设置为0、false或null，具体取决与元素类型
            </summary>
            <param name="Array">待清除的数组</param>
            <typeparam name="ArrayType">数组类型</typeparam>
            <returns>清理后的数组</returns>
        </member>
        <member name="M:GHSoft.Extension.ArrayExtension.Combine``1(``0[],``0[])">
            <summary>
            合并两个数组并返回一个新数组，新数组包含两个传入数组的值
            </summary>
            <typeparam name="ArrayType">数组中的数据类型</typeparam>
            <param name="Array1">数组1</param>
            <param name="Array2">数组2</param>
            <returns>返回包含两传入数组值的新数组</returns>
        </member>
        <member name="M:GHSoft.Extension.ArrayExtension.IndexOf(System.String[],System.String)">
            <summary>
            取得指定字符串在数组中的索引
            </summary>
            <param name="arrInput">数组</param>
            <param name="sInput">字符串</param>
            <returns>返回索引</returns>
        </member>
        <member name="T:GHSoft.Extension.DateTimeExtension">
            <summary>
            时间日期扩展方法。
            </summary>
            <remarks>
                <para>作    者：陈文军</para>
                <para>创建时间：2012/4/27 15:00:58</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Extension.DateTimeExtension.DaysInMonth(System.DateTime)">
            <summary>
            获取当前月的天数
            </summary>
            <param name="Date">待检查的日期</param>
            <returns>返回指定日期所在月的天数</returns>
        </member>
        <member name="M:GHSoft.Extension.DateTimeExtension.DaysLeftInMonth(System.DateTime)">
            <summary>
            获取当月剩余的天数
            </summary>
            <param name="Date">待检查的日期</param>
            <returns>当月剩余的天数</returns>
        </member>
        <member name="M:GHSoft.Extension.DateTimeExtension.DaysLeftInYear(System.DateTime)">
            <summary>
            获取指定日期所在年的剩余天数
            </summary>
            <param name="Date">待检查的日期</param>
            <returns>指定日期所在年的剩余天数</returns>
        </member>
        <member name="M:GHSoft.Extension.DateTimeExtension.DaysLeftInWeek(System.DateTime)">
            <summary>
            获取指定日期所在星期的剩余天数
            </summary>
            <param name="Date">待检查的日期</param>
            <returns>指定日期所在星期的剩余天数</returns>
        </member>
        <member name="M:GHSoft.Extension.DateTimeExtension.FirstDayOfMonth(System.DateTime)">
            <summary>
            获取指定日期的第一天日期
            </summary>
            <param name="Date">待检查的日期</param>
            <returns>所在月的1号日期</returns>
        </member>
        <member name="M:GHSoft.Extension.DateTimeExtension.FirstDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            获取指定日期所在星期的周一日期
            </summary>
            <param name="Date">待检查的日期</param>
            <param name="CultureInfo">区域设置(默认为系统当前设定区域)</param>
            <returns>返回指定日期所在星期的周一日期</returns>
        </member>
        <member name="M:GHSoft.Extension.DateTimeExtension.FromUnixTime(System.Int32)">
            <summary>
            将输入的一串数字转换成日期对象
            </summary>
            <param name="Date">待转换Unix日期</param>
            <returns>转换后的日期对象</returns>
        </member>
        <member name="M:GHSoft.Extension.DateTimeExtension.FromUnixTime(System.Int64)">
            <summary>
            将输入的一串数字转换成日期对象
            </summary>
            <param name="Date">待转换Unix日期</param>
            <returns>转换后的日期对象</returns>
        </member>
        <member name="M:GHSoft.Extension.DateTimeExtension.IsInFuture(System.DateTime)">
            <summary>
            判断系统当前日期是否在指定日期区域内
            </summary>
            <param name="Date">指定日期</param>
            <returns>True-是在指定日期时间内, false-不在指定日期时间内</returns>
        </member>
        <member name="M:GHSoft.Extension.DateTimeExtension.IsInPast(System.DateTime)">
            <summary>
            判断指定日期是否在系统当前日期以内
            </summary>
            <param name="Date">待检查日期</param>
            <returns>True-小于当前日期, false-大于当前日期</returns>
        </member>
        <member name="M:GHSoft.Extension.DateTimeExtension.IsWeekDay(System.DateTime)">
            <summary>
            判断指定日期是否为一周的平常日(即非周末日)
            </summary>
            <param name="Date">待检查日期</param>
            <returns>true-平常日；false-周末日</returns>
        </member>
        <member name="M:GHSoft.Extension.DateTimeExtension.IsWeekEnd(System.DateTime)">
            <summary>
            判断指定日期是否为周末日
            </summary>
            <param name="Date">待检查日期</param>
            <returns>true-周末日；false-平常日</returns>
        </member>
        <member name="M:GHSoft.Extension.DateTimeExtension.LastDayOfMonth(System.DateTime)">
            <summary>
            获取指定日期所在月的最后一天日期
            </summary>
            <param name="Date">指定获取月最后一天日期的时间对象</param>
            <returns>指定日期所在月的最后一天日期</returns>
        </member>
        <member name="M:GHSoft.Extension.DateTimeExtension.LastDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            获取指定日期所在周的最后一天日期
            </summary>
            <param name="Date">指定日期</param>
            <param name="CultureInfo">系统设置的区域 (默认为当前系统设置的区域 )</param>
            <returns>一周的最后一天</returns>
        </member>
        <member name="M:GHSoft.Extension.DateTimeExtension.ToUnix(System.DateTime)">
            <summary>
            获取Unix格式的日期
            </summary>
            <param name="Date">待转换日期对象</param>
            <returns>转换后的Unix格式日期</returns>
        </member>
        <member name="M:GHSoft.Extension.DateTimeExtension.ToDateTime(System.String)">
            <summary>
            将字符串转换为日期格式
            如果为空则或不符合转换规则返回null值
            </summary>
            <param name="str">待转换的字符串</param>
            <returns>返回转换结果</returns>
        </member>
        <member name="M:GHSoft.Extension.DateTimeExtension.ToDateTime2(System.String)">
            <summary>
            将字符串转换为日期格式
            如果为空则或不符合转换规则返回1900, 1, 1值
            </summary>
            <param name="str">待转换的字符串</param>
            <returns>返回转换结果</returns>
        </member>
        <member name="T:GHSoft.Extension.GenericComparer`1">
            <summary>
            通用比较类
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/27 15:31:54</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Extension.GenericComparer`1.Compare(`0,`0)">
            <summary>
            对象比较函数
            </summary>
            <param name="x">待比较参数</param>
            <param name="y">待比较参数</param>
            <returns>对比结果(0-表示相同；否则表示不同)</returns>
        </member>
        <member name="T:GHSoft.Extension.GenericEqualityComparer`1">
            <summary>
            通用相等比较类
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/27 15:32:54</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Extension.GenericEqualityComparer`1.Equals(`0,`0)">
            <summary>
            比较两对象是否相同
            </summary>
            <param name="x">待比较对象</param>
            <param name="y">待比较对象</param>
            <returns>true-相同；false-不相同</returns>
        </member>
        <member name="M:GHSoft.Extension.GenericEqualityComparer`1.GetHashCode(`0)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:GHSoft.Extension.GenericObjectExtension">
            <summary>
            处理对象的通用扩展
            </summary>
            <remarks>
                <para>作    者：陈文军</para>
                <para>创建时间：2012/4/27 15:08:07</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Extension.GenericObjectExtension.If``1(``0,System.Predicate{``0},``0)">
            <summary>
            按条件判断对象是否符合输入条件,如果符合条件-返回本身；否则返回默认值
            </summary>
            <typeparam name="T">待检测对象数据类型</typeparam>
            <param name="Object">待检测对象</param>
            <param name="Predicate">检测条件</param>
            <param name="DefaultValue">检测不符合传入条件时的默认返回值</param>
            <returns>符合检测条件，返回原始值；否则返回默认值</returns>
        </member>
        <member name="M:GHSoft.Extension.GenericObjectExtension.NotIf``1(``0,System.Predicate{``0},``0)">
            <summary>
            按条件判断对象是否符合输入条件,如果符合条件-返回默认值；否则返回本身
            </summary>
            <typeparam name="T">待检测对象数据类型</typeparam>
            <param name="Object">待检测对象</param>
            <param name="Predicate">检测条件</param>
            <param name="DefaultValue">检测符合传入条件时的默认返回值</param>
            <returns>符合检测条件，返回默认值；否则返回原始值</returns>
        </member>
        <member name="M:GHSoft.Extension.GenericObjectExtension.Return``2(``0,System.Func{``0,``1},``1)">
            <summary>
            判断数据对象是否符合制定传入的函数表达式(根据属性条件计算数据对象，判断结算结果是否为null)
            </summary>
            <typeparam name="T">传入数据类型</typeparam>
            <typeparam name="R">返回数据类型</typeparam>
            <param name="Object">待检查数据对象</param>
            <param name="Function">待用于计算的属性条件表达式</param>
            <param name="DefaultValue">当数据对象为null时的默认返回值</param>
            <returns>根据条件判断数据对象计算的返回值是否为null。(如果计算结果为null，则返回默认值；否则返回计算后的数据)</returns>
        </member>
        <member name="M:GHSoft.Extension.GenericObjectExtension.Chain``1(``0,System.Action{``0})">
            <summary>
            Allows actions to be chained together
            </summary>
            <typeparam name="T">对象的数据类型</typeparam>
            <param name="Object">数据对象</param>
            <param name="Action">Action to run</param>
            <returns>The original object</returns>
        </member>
        <member name="M:GHSoft.Extension.GenericObjectExtension.Chain``2(``0,System.Func{``0,``1})">
            <summary>
            Allows actions to be chained together
            </summary>
            <typeparam name="T">数据对象类型</typeparam>
            <typeparam name="R">返回类型</typeparam>
            <param name="Object">数据对象</param>
            <param name="Function">函数表达式</param>
            <returns>返回计算结果</returns>
        </member>
        <member name="M:GHSoft.Extension.GenericObjectExtension.Do``1(``0,System.Action{``0},``0)">
            <summary>
            Similar to Chain, except checks if the Object or Action is null first and returns the default value if they are
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="Object">Object to run the action on</param>
            <param name="Action">Action to run</param>
            <param name="DefaultValue">Default value to return if the action or object is null</param>
            <returns>The original object or the default value</returns>
        </member>
        <member name="M:GHSoft.Extension.GenericObjectExtension.Do``2(``0,System.Func{``0,``1},``1)">
            <summary>
            Similar to Chain, except checks if the Object or Function is null first and returns the default value if they are
            </summary>
            <typeparam name="T">The object type</typeparam>
            <typeparam name="R">The object type</typeparam>
            <param name="Object">Object to run the function on</param>
            <param name="Function">Function to run</param>
            <param name="DefaultValue">Default value to return if the action or object is null</param>
            <returns>The result of the function or the default value</returns>
        </member>
        <member name="M:GHSoft.Extension.GenericObjectExtension.Execute``1(System.Func{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Executes a function, repeating it a number of times in case it fails
            </summary>
            <typeparam name="T">Return type</typeparam>
            <param name="Function">Function to run</param>
            <param name="Attempts">Number of times to attempt it</param>
            <param name="RetryDelay">The amount of milliseconds to wait between tries</param>
            <param name="TimeOut">Max amount of time to wait for the function to run (waits for the current attempt to finish before checking)</param>
            <returns>The returned value from the function</returns>
        </member>
        <member name="M:GHSoft.Extension.GenericObjectExtension.Execute(System.Action,System.Int32,System.Int32,System.Int32)">
            <summary>
            Executes an action, repeating it a number of times in case it fails
            </summary>
            <param name="Action">Action to run</param>
            <param name="Attempts">Number of times to attempt it</param>
            <param name="RetryDelay">The amount of milliseconds to wait between tries</param>
            <param name="TimeOut">Max amount of time to wait for the function to run (waits for the current attempt to finish before checking)</param>
        </member>
        <member name="T:GHSoft.Extension.GenericStringFormatter">
            <summary>
            通用字符串格式化
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/27 15:36:38</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Extension.GenericStringFormatter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:GHSoft.Extension.GenericStringFormatter.GetFormat(System.Type)">
            <summary>
            
            </summary>
            <param name="formatType"></param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Extension.GenericStringFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Extension.GenericStringFormatter.Format(System.String,System.String)">
            <summary>
            格式化指定格式模式的字符串
            </summary>
            <param name="sInput">输入字符串</param>
            <param name="sFormatPattern">格式模式</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="M:GHSoft.Extension.GenericStringFormatter.GetMatchingInput(System.String,System.Char,System.Char@)">
            <summary>
            在输入的字符串中获取匹配到的字符
            </summary>
            <param name="Input">输入字符串(待格式的字符串)</param>
            <param name="FormatChar">当前格式字符</param>
            <param name="MatchChar">匹配到的字符</param>
            <returns>输入字符串的其余部分了</returns>
        </member>
        <member name="M:GHSoft.Extension.GenericStringFormatter.IsValid(System.String)">
            <summary>
            判断格式模式是否有效
            </summary>
            <param name="FormatPattern">格式模式</param>
            <returns>true表示有效, false-表示无效</returns>
        </member>
        <member name="P:GHSoft.Extension.GenericStringFormatter.DigitChar">
            <summary>
            代表数字 (默认为： #)
            </summary>
        </member>
        <member name="P:GHSoft.Extension.GenericStringFormatter.AlphaChar">
            <summary>
            代表字母字符 (默认为： @)
            </summary>
        </member>
        <member name="P:GHSoft.Extension.GenericStringFormatter.EscapeChar">
            <summary>
            代表转义字符 (默认为： \)
            </summary>
        </member>
        <member name="T:GHSoft.Extension.ICollectionExtension">
            <summary>
            数据集合扩展类
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/27 15:13:12</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Extension.ICollectionExtension.AddAndReturn``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            向集合列表中添加一个项，并返回该项数据
            </summary>
            <typeparam name="T">添加数据项类别</typeparam>
            <param name="Collection">项添加的目标数据集合</param>
            <param name="item">待添加到数据集合的数据项</param>
            <returns>返回原数据项</returns>
        </member>
        <member name="M:GHSoft.Extension.ICollectionExtension.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将列表集合数据添加至另一个数据集合中
            </summary>
            <typeparam name="T">数据集合中的数据类型</typeparam>
            <param name="Collection">数据集合</param>
            <param name="items">待添加的数据列表</param>
            <returns>处理后的数据集合</returns>
        </member>
        <member name="M:GHSoft.Extension.ICollectionExtension.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Predicate{``0})">
            <summary>
            添加数据项到数据集合中（判断输入的数据项是否符合判定条件，如果符合，将数据项添加至数据集合，并返回-true；如果不符合，返回-false）
            </summary>
            <typeparam name="T">数据集合类型</typeparam>
            <param name="Collection">数据集合</param>
            <param name="item">待添加到数据集合的数据对象</param>
            <param name="predicate">定义一组数据项添加的判定条件</param>
            <returns>True-表示添加成功, false-表示数据项不符合条件</returns>
        </member>
        <member name="M:GHSoft.Extension.ICollectionExtension.AddIf``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            添加一个列表的数据到另一数据集合中（判断输入的数据项是否符合判定条件，如果符合，将数据项添加至数据集合，并返回-true；如果不符合，返回-false）
            </summary>
            <typeparam name="T">数据集合数据类型</typeparam>
            <param name="Collection">数据集合</param>
            <param name="items">待添加的数据列表</param>
            <param name="predicate">定义一组数据项添加的判定条件</param>
            <returns>True-表示添加成功, false-表示数据项不符合条件</returns>
        </member>
        <member name="M:GHSoft.Extension.ICollectionExtension.AddIfUnique``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            往指定数据集合中添加数据项（在数据添加前，先判断待添加的数据项是否已经存在数据集合中）
            </summary>
            <typeparam name="T">数据集合类型</typeparam>
            <param name="Collection">数据集合</param>
            <param name="item">待添加到数据集合的数据项</param>
            <returns>True-表示添加成功, false-添加失败或集合中已存在该数据</returns>
        </member>
        <member name="M:GHSoft.Extension.ICollectionExtension.AddIfUnique``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            添加一个数据列表的数据到指定数据集合
            </summary>
            <typeparam name="T">指定数据集合的数据类型</typeparam>
            <param name="Collection">指定的数据集合</param>
            <param name="items">待添加到数据集合的数据列表</param>
            <returns>True -添加完成, false-添加失败或集合中已存在该数据</returns>
        </member>
        <member name="M:GHSoft.Extension.ICollectionExtension.Remove``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            移除指定数据集合中所有符合指定条件的数据
            </summary>
            <typeparam name="T">在集合中的项数据类型</typeparam>
            <param name="Collection">指定的数据集合</param>
            <param name="predicate">数据项移除条件</param>
        </member>
        <member name="M:GHSoft.Extension.ICollectionExtension.RemoveRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            从指定数据集合中移除列表清单中的所有数据项
            </summary>
            <typeparam name="T">指定的数据集合数据类型</typeparam>
            <param name="Collection">指定的数据集合</param>
            <param name="items">列表清单</param>
            <returns>返回移除后的数据集合</returns>
        </member>
        <member name="T:GHSoft.Extension.IComparableExtension">
            <summary>
            数据比较的扩展
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/27 15:14:16</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Extension.IComparableExtension.Between``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            判断一个指定数据对象是否在两个数据对象之间
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="Value">待检查的数据</param>
            <param name="Min">最小值</param>
            <param name="Max">最大值</param>
            <param name="Comparer">用于比较值的比较器 (默认为：GenericComparer)</param>
            <returns>True-表示待检查值介于最大值与最小值之间, false-表示在最大值与最小值范围之外</returns>
        </member>
        <member name="T:GHSoft.Extension.IDictionaryExtension">
            <summary>
            数据字典扩展
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/27 15:16:52</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Extension.IDictionaryExtension.Sort``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IComparer{``0})">
            <summary>
            按字典Key对数据字典进行排序
            </summary>
            <typeparam name="T1">字典Key类型</typeparam>
            <typeparam name="T2">字典值类型</typeparam>
            <param name="dictionary">待排序的数据字典</param>
            <param name="comparer">用于排序的实现方法(默认为：GenericComparer)</param>
            <returns>返回排序后的数据字典</returns>
        </member>
        <member name="M:GHSoft.Extension.IDictionaryExtension.SortByValue``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IComparer{``0})">
            <summary>
            按值对数据字典进行排序
            </summary>
            <typeparam name="T1">字典Key类型</typeparam>
            <typeparam name="T2">字典值类型</typeparam>
            <param name="dictionary">待排序的数据字典</param>
            <param name="comparer">用于排序的实现方法(默认为：GenericComparer)</param>
            <returns>返回排序后的数据字典</returns>
        </member>
        <member name="T:GHSoft.Extension.IEnumerableExtension">
            <summary>
            
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/27 15:21:19</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Extension.IEnumerableExtension.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Used to determine if an item in the IEnumerable matches a predicate
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">List to search</param>
            <param name="Match">The predicate used to check if something exists</param>
            <returns>True if at least one item matches the predicate, false otherwise</returns>
        </member>
        <member name="M:GHSoft.Extension.IEnumerableExtension.For``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Action{``0})">
            <summary>
            Does an action for each item in the IEnumerable between the start and end indexes
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Start">Item to start with</param>
            <param name="End">Item to end with</param>
            <param name="Action">Action to do</param>
            <returns>The original list</returns>
        </member>
        <member name="M:GHSoft.Extension.IEnumerableExtension.For``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            Does a function for each item in the IEnumerable between the start and end indexes and returns an IEnumerable of the results
            </summary>
            <typeparam name="T">Object type</typeparam>
            <typeparam name="R">Return type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Start">Item to start with</param>
            <param name="End">Item to end with</param>
            <param name="Function">Function to do</param>
            <returns>The resulting list</returns>
        </member>
        <member name="M:GHSoft.Extension.IEnumerableExtension.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Does an action for each item in the IEnumerable
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Action">Action to do</param>
            <returns>The original list</returns>
        </member>
        <member name="M:GHSoft.Extension.IEnumerableExtension.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Does a function for each item in the IEnumerable, returning a list of the results
            </summary>
            <typeparam name="T">Object type</typeparam>
            <typeparam name="R">Return type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Function">Function to do</param>
            <returns>The resulting list</returns>
        </member>
        <member name="M:GHSoft.Extension.IEnumerableExtension.ForParallel``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Action{``0})">
            <summary>
            Does an action for each item in the IEnumerable between the start and end indexes in parallel
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Start">Item to start with</param>
            <param name="End">Item to end with</param>
            <param name="Action">Action to do</param>
            <returns>The original list</returns>
        </member>
        <member name="M:GHSoft.Extension.IEnumerableExtension.ForParallel``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            Does an action for each item in the IEnumerable between the start and end indexes in parallel
            </summary>
            <typeparam name="T">Object type</typeparam>
            <typeparam name="R">Results type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Start">Item to start with</param>
            <param name="End">Item to end with</param>
            <param name="Function">Function to do</param>
            <returns>The resulting list</returns>
        </member>
        <member name="M:GHSoft.Extension.IEnumerableExtension.ForEachParallel``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Does an action for each item in the IEnumerable in parallel
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Action">Action to do</param>
            <returns>The original list</returns>
        </member>
        <member name="M:GHSoft.Extension.IEnumerableExtension.ForEachParallel``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Does an action for each item in the IEnumerable in parallel
            </summary>
            <typeparam name="T">Object type</typeparam>
            <typeparam name="R">Results type</typeparam>
            <param name="List">IEnumerable to iterate over</param>
            <param name="Function">Function to do</param>
            <returns>The results in an IEnumerable list</returns>
        </member>
        <member name="M:GHSoft.Extension.IEnumerableExtension.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if a list is null or empty
            </summary>
            <typeparam name="T">Data type</typeparam>
            <param name="Value">List to check</param>
            <returns>True if it is null or empty, false otherwise</returns>
        </member>
        <member name="M:GHSoft.Extension.IEnumerableExtension.RemoveDefaults``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Removes default values from a list
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="Value">List to cull items from</param>
            <param name="EqualityComparer">Equality comparer used (defaults to GenericEqualityComparer)</param>
            <returns>An IEnumerable with the default values removed</returns>
        </member>
        <member name="M:GHSoft.Extension.IEnumerableExtension.ToArray``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Converts a list to an array
            </summary>
            <typeparam name="Source">Source type</typeparam>
            <typeparam name="Target">Target type</typeparam>
            <param name="List">List to convert</param>
            <param name="ConvertingFunction">Function used to convert each item</param>
            <returns>The array containing the items from the list</returns>
        </member>
        <member name="M:GHSoft.Extension.IEnumerableExtension.ToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Converts the list to a string where each item is seperated by the Seperator
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="List">List to convert</param>
            <param name="ItemOutput">Used to convert the item to a string (defaults to calling ToString)</param>
            <param name="Seperator">Seperator to use between items (defaults to ,)</param>
            <returns>The string version of the list</returns>
        </member>
        <member name="M:GHSoft.Extension.IEnumerableExtension.TrueForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Determines if a predicate is true for each item in a list
            </summary>
            <typeparam name="T">The type of the items in the list</typeparam>
            <param name="List">IEnumerable to look through</param>
            <param name="Predicate">Predicate to use to check the IEnumerable</param>
            <returns>True if they all pass the predicate, false otherwise</returns>
        </member>
        <member name="M:GHSoft.Extension.IEnumerableExtension.TryAll``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0})">
            <summary>
            Tries to do the action on each item in the list. If an exception is thrown,
            it does the catch action on the item (if it is not null).
            </summary>
            <typeparam name="T">The type of the items in the list</typeparam>
            <param name="List">IEnumerable to look through</param>
            <param name="Action">Action to run on each item</param>
            <param name="CatchAction">Catch action (defaults to null)</param>
            <returns>The list after the action is run on everything</returns>
        </member>
        <member name="M:GHSoft.Extension.IEnumerableExtension.TryAllParallel``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0})">
            <summary>
            Tries to do the action on each item in the list. If an exception is thrown,
            it does the catch action on the item (if it is not null). This is done in
            parallel.
            </summary>
            <typeparam name="T">The type of the items in the list</typeparam>
            <param name="List">IEnumerable to look through</param>
            <param name="Action">Action to run on each item</param>
            <param name="CatchAction">Catch action (defaults to null)</param>
            <returns>The list after the action is run on everything</returns>
        </member>
        <member name="T:GHSoft.Extension.MatchCollectionExtension">
            <summary>
            匹配集合扩展
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/27 15:22:58</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Extension.MatchCollectionExtension.Where(System.Text.RegularExpressions.MatchCollection,System.Predicate{System.Text.RegularExpressions.Match})">
            <summary>
            通过迭代方式在指定字符串中获取满足指定条件的数据列表
            </summary>
            <param name="collection">待分析的数据对象</param>
            <param name="predicate">判定条件</param>
            <returns>满足条件的结果数据列表</returns>
        </member>
        <member name="T:GHSoft.Extension.ObjectExtension">
            <summary>
            Object扩展
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/27 14:22:29</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Extension.ObjectExtension.ToDoubleTry(System.Object,System.Double)">
            <summary>
            将数据对象转换成 double 类型
            转换失败时不会抛出异常，而是返回默认值
            </summary>
            <param name="oInput">待转换数据对象</param>
            <param name="defaultvalue">转换失败时返回的默认值</param>
            <returns>返回转换结果</returns>
        </member>
        <member name="M:GHSoft.Extension.ObjectExtension.ToFloatTry(System.Object,System.Single)">
            <summary>
            将数据对象转换成 float 类型
            转换失败时不会抛出异常，而是返回默认值
            </summary>
            <param name="oInput">待转换数据对象</param>
            <param name="defaultvalue">转换失败时返回的默认值</param>
            <returns>返回转换结果</returns>
        </member>
        <member name="M:GHSoft.Extension.ObjectExtension.ToIntTry(System.Object,System.Int32)">
            <summary>
            将数据对象转换成 int 类型
            转换失败时不会抛出异常，而是返回默认值
            </summary>
            <param name="oInput">待转换数据对象</param>
            <param name="defaultvalue">转换失败时返回的默认值</param>
            <returns>返回转换结果</returns>
        </member>
        <member name="M:GHSoft.Extension.ObjectExtension.ToDecimalTry(System.Object,System.Decimal)">
            <summary>
            将数据对象转换成 decimal 类型
            转换失败时不会抛出异常，而是返回默认值
            </summary>
            <param name="oInput">待转换数据对象</param>
            <param name="defaultvalue">转换失败时返回的默认值</param>
            <returns>返回转换结果</returns>
        </member>
        <member name="M:GHSoft.Extension.ObjectExtension.ToLongTry(System.Object,System.Int64)">
            <summary>
            将数据对象转换成 long 类型
            转换失败时不会抛出异常，而是返回默认值
            </summary>
            <param name="oInput">待转换数据对象</param>
            <param name="defaultvalue">转换失败时返回的默认值</param>
            <returns>返回转换结果</returns>
        </member>
        <member name="M:GHSoft.Extension.ObjectExtension.IsBoolType(System.Object)">
            <summary>
            判断是否为布尔型
            </summary>
            <param name="oInput">待判断对象</param>
            <returns>返回判断结果</returns>
        </member>
        <member name="M:GHSoft.Extension.ObjectExtension.ToGuidTry(System.String)">
            <summary>
            将字符串转换成 Single 类型
            转换失败时不会抛出异常，而是返回默认值
            </summary>
            <param name="sInput">待转换的字符串</param>
            <returns>返回转换结果</returns>
        </member>
        <member name="M:GHSoft.Extension.ObjectExtension.ToBool(System.Object)">
            <summary>
            把任意的变量装换成布尔，如果该变量不能转换成布尔，返回false
            </summary>
            <param name="oInput">待判断的任意变量</param>
            <returns>布尔，至少是false</returns>
        </member>
        <member name="M:GHSoft.Extension.ObjectExtension.ToEnumTry``1(System.String,``0)">
            <summary>
            字符串转换为枚举
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="enumobj"></param>
            <param name="t">默认值</param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Extension.ObjectExtension.ToDataTable(System.Enum)">
            <summary>
            枚举类型转成DataTable
            </summary>
            <param name="en"></param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Extension.ObjectExtension.ToIDictionary(System.Enum)">
            <summary>
            枚举类型转成字典
            </summary>
            <param name="en"></param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Extension.ObjectExtension.WriteLog(System.Exception,System.String,System.String)">
            <summary>
            写出日志
            </summary>
            <param name="ex"></param>
            <param name="type"></param>
            <param name="title"></param>
        </member>
        <member name="T:GHSoft.Extension.PropertyInfoExtension">
            <summary>
            PropertyInfo属性特性的扩展
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/27 15:26:30</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Extension.PropertyInfoExtension.GetDicProperties(System.Reflection.PropertyInfo[])">
            <summary>
            把PropertyInfo转成字典
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:GHSoft.Extension.StringExtension">
            <summary>
            String 字符串扩展
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/27 14:56:59</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.Encode(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            将字符串转换为另一种编码的字符串
            </summary>
            <param name="sInput">待转换字符串</param>
            <param name="eOriginalEncodingUsing">字符串当前使用的编码格式 (默认为：ASCII)</param>
            <param name="encodingUsing">指定的转换编码格式 (默认为：UTF8)</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.FromBase64(System.String,System.Text.Encoding)">
            <summary>
            根据传入的编码转换基于base64字符串
            </summary>
            <param name="sInput">待转换的字符串</param>
            <param name="encodingUsing">编码格式 (默认为：UTF8)</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.FromBase64(System.String)">
            <summary>
            Converts base 64 string to a byte array
            </summary>
            <param name="Input">Input string</param>
            <returns>A byte array equivalent of the base 64 string</returns>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.Left(System.String,System.Int32)">
            <summary>
            从字符串中获取0索引开始的指定长度的字符串
            </summary>
            <param name="sInput">字符串</param>
            <param name="iLength">要返回的字符个数</param>
            <returns>返回目标字符串</returns>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.Right(System.String,System.Int32)">
            <summary>
            获取从字符串右边开始的指定字符个数的字符串
            </summary>
            <param name="sInput">字符串</param>
            <param name="iLength">要返回的字符个数</param>
            <returns>返回获取结果字符串</returns>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.ToBase64(System.String,System.Text.Encoding)">
            <summary>
            将字符串转换为指定编码格式的base 64字符串
            </summary>
            <param name="sInput">待转换的字符串</param>
            <param name="eOriginalEncodingUsing">字符串使用的编码格式 (默认为：UTF8)</param>
            <returns>Bas64 string</returns>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.ToByteArray(System.String,System.Text.Encoding)">
            <summary>
            将字符串转换为字节数组
            </summary>
            <param name="sInput">待转换的字符串</param>
            <param name="encodingUsing">编码格式(默认为：UTF8)</param>
            <returns>转换后的字节数组</returns>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.ToFirstCharacterUpperCase(System.String)">
            <summary>
            输入字符串的第一个字母大写
            </summary>
            <param name="Input">待处理字符串</param>
            <returns>处理后的字符串</returns>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.ToSentenceCapitalize(System.String)">
            <summary>
            处理字符串内每个句子的首字母大写
            </summary>
            <param name="sInput">待处理字符串</param>
            <returns>处理后的字符串</returns>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.ToTitleCase(System.String)">
            <summary>
            大写每个单词的第一个字符
            </summary>
            <param name="sInput">待处理字符串</param>
            <returns>处理后的字符串</returns>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.NumberTimesOccurs(System.String,System.String)">
            <summary>
            在文本中返回字符串出现次数
            </summary>
            <param name="sInput">原字符串</param>
            <param name="sMatch">要匹配的字符串（可以是正则表达式）</param>
            <returns>字符串出现的次数</returns>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.Reverse(System.String)">
            <summary>
            反转一个字符串
            </summary>
            <param name="sInput">待处理字符串</param>
            <returns>反转后的字符串</returns>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.FilterOutText(System.String,System.String)">
            <summary>
            从输入中移除过滤器的文本。
            </summary>
            <param name="sInput">待处理字符串</param>
            <param name="sFilter">待过滤掉的正则表达式的文本表达式</param>
            <returns>处理后的字符串</returns>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.KeepFilterText(System.String,System.String)">
            <summary>
            删除待处理字符串中不在过滤文本字符串中的其他任何字符
            </summary>
            <param name="sInput">待处理字符串</param>
            <param name="sFilter">需保留的正则表达式文本字符</param>
            <returns>筛选结果字符串</returns>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.AlphaNumericOnly(System.String)">
            <summary>
            只保留字母数字字符
            </summary>
            <param name="sInput">待处理字符串</param>
            <returns>只包含字母数字字符的字符串</returns>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.AlphaCharactersOnly(System.String)">
            <summary>
            只保留字母字符
            </summary>
            <param name="sInput">待处理字符串</param>
            <returns>处理结果字符串</returns>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.NumericOnly(System.String,System.Boolean)">
            <summary>
            只保留数字字符
            </summary>
            <param name="sInput">待处理字符串</param>
            <param name="bKeepNumericPunctuation">是否应保持小数</param>
            <returns>只包含数字字符的字符串</returns>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.IsUnicode(System.String)">
            <summary>
            判断一个字符串是否Unicode
            </summary>
            <param name="sInput">待检查字符串</param>
            <returns>True-表示是Unicode, false-表示不是Unicode</returns>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.FormatString(System.String,System.String)">
            <summary>
            基于指定格式化规则，格式化字符串
            # = digits
            @ = alpha characters
            \ = escape char
            </summary>
            <param name="sInput">待格式化字符串</param>
            <param name="sFormat">格式化规则</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.RegexFormat(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            使用正则表达式格式化输入字符串
            </summary>
            <param name="sInput">待格式化的字符串</param>
            <param name="sFormat">正则表达式字符串</param>
            <param name="sOutputFormat">替换字符串</param>
            <param name="rOptions">设置正则表达式选项的枚举</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.IsNumberString(System.String)">
            <summary>
            判断是否数字字符串
            </summary>
            <param name="sInput">待判断的字符串</param>
            <returns>bool值</returns>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.IsNullOrWhiteSpace(System.String)">
            <summary>
            判断字符串是否为null或空白
            </summary>
            <param name="sInput">待判断的字符串</param>
            <returns>bool值</returns>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.ToString(System.String)">
            <summary>
            把任意为空或null的字符串返回为null值；否则返回本身
            </summary>
            <param name="sInput">待转换的字符串</param>
            <returns>返回结果值</returns>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.IsHaveUrlParameter(System.String)">
            <summary>
            Url是否有参数
            </summary>
            <param name="str">当前字符串</param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Extension.StringExtension.GetParStr(System.String)">
            <summary>
             获取地址参数
            </summary>
            <param name="str">当前字符串</param> 
            <returns>是否是数值类型</returns>
        </member>
        <member name="T:GHSoft.Extension.TypeConversionExtension">
            <summary>
            
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/27 15:18:08</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Extension.TypeConversionExtension.FormatToString(System.Object,System.String)">
            <summary>
            Calls the object's ToString function passing in the formatting
            </summary>
            <param name="Input">Input object</param>
            <param name="Format">Format of the output string</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:GHSoft.Extension.TypeConversionExtension.IsNotDefault``1(``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the object is not null
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="Object">The object to check</param>
            <param name="EqualityComparer">Equality comparer used to determine if the object is equal to default</param>
            <returns>False if it is null, true otherwise</returns>
        </member>
        <member name="M:GHSoft.Extension.TypeConversionExtension.IsDefault``1(``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the object is null
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="Object">The object to check</param>
            <param name="EqualityComparer">Equality comparer used to determine if the object is equal to default</param>
            <returns>True if it is null, false otherwise</returns>
        </member>
        <member name="M:GHSoft.Extension.TypeConversionExtension.IsNotNull(System.Object)">
            <summary>
            Determines if the object is not null
            </summary>
            <param name="Object">The object to check</param>
            <returns>False if it is null, true otherwise</returns>
        </member>
        <member name="M:GHSoft.Extension.TypeConversionExtension.IsNull(System.Object)">
            <summary>
            Determines if the object is null
            </summary>
            <param name="Object">The object to check</param>
            <returns>True if it is null, false otherwise</returns>
        </member>
        <member name="M:GHSoft.Extension.TypeConversionExtension.IsNotNullOrDBNull(System.Object)">
            <summary>
            Determines if the object is not null or DBNull
            </summary>
            <param name="Object">The object to check</param>
            <returns>False if it is null/DBNull, true otherwise</returns>
        </member>
        <member name="M:GHSoft.Extension.TypeConversionExtension.IsNullOrDBNull(System.Object)">
            <summary>
            Determines if the object is null or DBNull
            </summary>
            <param name="Object">The object to check</param>
            <returns>True if it is null/DBNull, false otherwise</returns>
        </member>
        <member name="M:GHSoft.Extension.TypeConversionExtension.NullCheck``1(``0,``0)">
            <summary>
            Does a null check and either returns the default value (if it is null) or the object
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="Object">Object to check</param>
            <param name="DefaultValue">Default value to return in case it is null</param>
            <returns>The default value if it is null, the object otherwise</returns>
        </member>
        <member name="M:GHSoft.Extension.TypeConversionExtension.ThrowIfDefault``1(``0,System.String,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if the object is equal to default value and throws an ArgumentNullException if it is
            </summary>
            <param name="Item">The object to check</param>
            <param name="EqualityComparer">Equality comparer used to determine if the object is equal to default</param>
            <param name="Name">Name of the argument</param>
        </member>
        <member name="M:GHSoft.Extension.TypeConversionExtension.ThrowIfNull(System.Object,System.String)">
            <summary>
            判断对象是否为null，如果是在抛出一个带参数名称的 ArgumentNullException 异常
            </summary>
            <param name="Item">待检查的对象</param>
            <param name="Name">参数名称</param>
        </member>
        <member name="M:GHSoft.Extension.TypeConversionExtension.ThrowIfNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            判断IEnumerable 是否为 null or empty，如果是在抛出一个带参数名称的ArgumentNullException异常
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="Item">待检查的对象</param>
            <param name="Name">参数名称</param>
        </member>
        <member name="M:GHSoft.Extension.TypeConversionExtension.ThrowIfNullOrDBNull(System.Object,System.String)">
            <summary>
            判断一个对象是否为null或DbNull，如果是则抛出一个待参数名称的ArgumentNullException异常
            </summary>
            <param name="Item">The object to check</param>
            <param name="Name">参数名称</param>
        </member>
        <member name="M:GHSoft.Extension.TypeConversionExtension.ToSQLDbType(System.Type)">
            <summary>
            将一个 .Net类型转换为SQLDbType 值
            </summary>
            <param name="Type">.Net 类型</param>
            <returns>相对应的SQLDbType</returns>
        </member>
        <member name="M:GHSoft.Extension.TypeConversionExtension.ToSqlDbType(System.Data.DbType)">
            <summary>
            将DbType类型转换为SqlDbType类型
            </summary>
            <param name="Type">待转换类型</param>
            <returns>相对应的SqlDbType类型 (如果存在的前提下)</returns>
        </member>
        <member name="M:GHSoft.Extension.TypeConversionExtension.ToDbType(System.Type)">
            <summary>
            将一个 .Net类型转换为 DbType 值
            </summary>
            <param name="Type">.Net类型</param>
            <returns>相应的 DbType类型</returns>
        </member>
        <member name="M:GHSoft.Extension.TypeConversionExtension.ToDbType(System.Data.SqlDbType)">
            <summary>
            将 SqlDbType 转换为 DbType
            </summary>
            <param name="Type">待转换类型</param>
            <returns>相应的DbType类型(如果存在的前提下)</returns>
        </member>
        <member name="M:GHSoft.Extension.TypeConversionExtension.ToType(System.Data.SqlDbType)">
            <summary>
            将一个 SQLDbType 值转换到 .Net 类型
            </summary>
            <param name="Type">SqlDbType 类型</param>
            <returns>相应的.NET类型</returns>
        </member>
        <member name="M:GHSoft.Extension.TypeConversionExtension.ToType(System.Data.DbType)">
            <summary>
            将一个 DbType 值转换到 .Net 类型
            </summary>
            <param name="Type">DbType</param>
            <returns>相应的.NET类型</returns>
        </member>
        <member name="M:GHSoft.Extension.TypeConversionExtension.TryTo``2(``0,``1)">
            <summary>
            尝试将对象转换为另一种格式，并返回该值
            </summary>
            <typeparam name="T">源对象类型</typeparam>
            <typeparam name="R">返回类型</typeparam>
            <param name="Object">待转换的对象</param>
            <param name="DefaultValue">在转换失败或者有问题情况下的默认返回值</param>
            <returns>返回转换结果</returns>
        </member>
        <member name="M:GHSoft.Extension.TypeConversionExtension.CallMethod(System.String,System.Object,System.Object[])">
            <summary>
            对象上的方法调用
            </summary>
            <param name="MethodName">方法名称</param>
            <param name="Object">调用方法的对象</param>
            <param name="InputVariables">(可选)方法需要的变量</param>
            <returns>该方法的返回值</returns>
        </member>
        <member name="T:GHSoft.Extension.ValueTypeExtension">
            <summary>
            值类型扩展方法
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/27 15:28:10</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Extension.ValueTypeExtension.ToBool(System.Int32)">
            <summary>
            将整形数据转换成布尔类型
            </summary>
            <param name="input">整型值</param>
            <returns>转换后的布尔等价值</returns>
        </member>
        <member name="M:GHSoft.Extension.ValueTypeExtension.ToInt(System.Boolean)">
            <summary>
            将布尔值转换成整数值
            </summary>
            <param name="value">待转换的布尔值</param>
            <returns>转换后的等价布尔值</returns>
        </member>
        <member name="M:GHSoft.Extension.ValueTypeExtension.ToBase64String(System.Byte[])">
            <summary>
            将 8 位无符号整数的数组转换为其用 Base64 数字编码的等效字符串表示形式
            </summary>
            <param name="input">8 位无符号整数的数组</param>
            <returns>转换后的 Base64 数字编码的等效字符串</returns>
        </member>
        <member name="M:GHSoft.Extension.ValueTypeExtension.ToEncodedString(System.Byte[],System.Text.Encoding,System.Int32,System.Int32)">
            <summary>
            将 8 位无符号整数的数组转换为一个字符串
            </summary>
            <param name="input">8 位无符号整数的数组</param>
            <param name="encodingUsing">字符串的编码格式 (默认为：UTF8)</param>
            <param name="index">第一个要解码的字节索引</param>
            <param name="count">要解码的字节数，开始于索引index (-1表示整个转换)</param>
            <returns>字节数组转换后的字符串</returns>
        </member>
        <member name="M:GHSoft.Extension.ValueTypeExtension.IsUnicode(System.Byte[])">
            <summary>
            判断是否为unicode编码的字节数组
            </summary>
            <param name="Input">待检查的字节数组</param>
            <returns>True-是unicode字节数组, false-不是unicode字节数组</returns>
        </member>
        <member name="T:GHSoft.Filters.ArgumentFilter">
            <summary>
            参数过滤器。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/18 12:04:12</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Filters.ArgumentFilter.StringZero(System.String,System.String)">
            <summary>
            检测字符串参数是否为 Null 或 Empty。
            </summary>
            <param name="argument">待检测的参数。</param>
            <param name="name">参数名称。</param>
            <exception cref="T:System.ArgumentNullException">
            参数为 Null 或 Empty。
            </exception>
        </member>
        <member name="M:GHSoft.Filters.ArgumentFilter.StringZero(System.String,System.String,System.String)">
            <summary>
            检测字符串参数是否为 Null 或 Empty。
            </summary>
            <param name="argument">待检测的参数。</param>
            <param name="name">参数名称。</param>
            <param name="message">自定义的异常消息。</param>
            <exception cref="T:System.ArgumentNullException">
            参数为 Null 或 Empty。
            </exception>
        </member>
        <member name="M:GHSoft.Filters.ArgumentFilter.Null(System.Object,System.String)">
            <summary>
            检测参数是否为 Null。
            </summary>
            <param name="argument">要检测的参数。</param>
            <param name="name">参数名称。</param>
            <exception cref="T:System.ArgumentNullException">
            参数为 Null。
            </exception>
        </member>
        <member name="M:GHSoft.Filters.ArgumentFilter.Null(System.Object,System.String,System.String)">
            <summary>
            检测参数是否为 Null。
            </summary>
            <param name="argument">要检测的参数。</param>
            <param name="name">参数名称。</param>
            <param name="message">自定义的异常消息。</param>
            <exception cref="T:System.ArgumentNullException">
            参数为 Null。
            </exception>
        </member>
        <member name="M:GHSoft.Filters.ArgumentFilter.ArrayZero``1(``0[],System.String)">
            <summary>
            过滤长度为零的数组参数。
            </summary>
            <typeparam name="T">数组类型。</typeparam>
            <param name="argument">待过滤的参数。</param>
            <param name="name">参数名称。</param>
            <exception cref="T:System.ArgumentException">
            参数长度为零。
            </exception>
        </member>
        <member name="M:GHSoft.Filters.ArgumentFilter.ArrayZero``1(``0[],System.String,System.String)">
            <summary>
            过滤长度为零的数组参数。
            </summary>
            <typeparam name="T">数组类型。</typeparam>
            <param name="argument">待过滤的参数。</param>
            <param name="name">参数名称。</param>
            <param name="message">自定义的异常消息。</param>
            <exception cref="T:System.ArgumentException">
            参数长度为零。
            </exception>
        </member>
        <member name="M:GHSoft.Filters.ArgumentFilter.Zero(System.Double,System.String)">
            <summary>
            过滤数值为零的参数。
            </summary>
            <param name="argument">待过滤的参数。</param>
            <param name="name">参数名称。</param>
            <exception cref="T:System.ArgumentException">
            参数长度为零。
            </exception>
        </member>
        <member name="M:GHSoft.Filters.ArgumentFilter.Zero(System.Double,System.String,System.String)">
            <summary>
            过滤数值为零的参数。
            </summary>
            <param name="argument">待过滤的参数。</param>
            <param name="name">参数名称。</param>
            <param name="message">自定义的异常消息。</param>
            <exception cref="T:System.ArgumentException">
            参数长度为零。
            </exception>
        </member>
        <member name="M:GHSoft.Filters.ArgumentFilter.Type(System.Object,System.String,System.Type)">
            <summary>
            检测参数是否为期望的类型。
            </summary>
            <param name="argument">待检测的参数。</param>
            <param name="name">参数名称。</param>
            <param name="type">期望的类型。</param>
            <exception cref="T:System.ArgumentException">
            参数非期望类型。
            </exception>
        </member>
        <member name="M:GHSoft.Filters.ArgumentFilter.Type(System.Object,System.String,System.Type,System.String)">
            <summary>
            检测参数是否为期望的类型。
            </summary>
            <param name="argument">待检测的参数。</param>
            <param name="name">参数名称。</param>
            <param name="type">期望的类型。</param>
            <param name="message">自定义的异常消息。</param>
            <exception cref="T:System.ArgumentException">
            参数非期望类型。
            </exception>
        </member>
        <member name="M:GHSoft.Filters.ArgumentFilter.Numeric(System.Object,System.String)">
            <summary>
            验证一个参数是否是数值类型。
            </summary>
            <param name="argument">待检测的参数。</param>
            <param name="name">参数名称。</param>
            <exception cref="T:System.ArgumentException">
            参数非有效数值。
            </exception>
        </member>
        <member name="M:GHSoft.Filters.ArgumentFilter.Numeric(System.Object,System.String,System.String)">
            <summary>
            验证一个参数是否是数值类型。
            </summary>
            <param name="argument">待检测的参数。</param>
            <param name="name">参数名称。</param>
            <param name="message">自定义的异常消息。</param>
            <exception cref="T:System.ArgumentException">
            参数非有效数值。
            </exception>
        </member>
        <member name="M:GHSoft.Filters.ArgumentFilter.Enumeration``1(System.Object,System.String)">
            <summary>
            验证一个值是不是枚举类型的可选值。
            </summary>
            <param name="argument">待验证的参数。</param>
            <param name="name">待验证的参数名。</param>
            <exception cref="T:System.ArgumentException">
            参数非有效枚举范围。
            </exception>
        </member>
        <member name="M:GHSoft.Filters.ArgumentFilter.Enumeration``1(System.Object,System.String,System.String)">
            <summary>
            验证一个值是不是枚举类型的可选值。
            </summary>
            <param name="argument">待验证的参数。</param>
            <param name="name">待验证的参数名。</param>
            <param name="message">自定义的异常消息。</param>
            <exception cref="T:System.ArgumentException">
            参数非有效枚举范围。
            </exception>
        </member>
        <member name="M:GHSoft.Filters.ArgumentFilter.Limit``1(``0,System.String,``0,``0)">
            <summary>
            验证参数是否符合调用的方法所定义的允许取值范围。
            </summary>
            <typeparam name="T">数据类型。</typeparam>
            <param name="argument">待验证的参数。</param>
            <param name="name">待验证的参数名。</param>
            <param name="min">允许的最小值</param>
            <param name="max">允许的最大值</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            参数值超出调用的方法所定义的允许取值范围。
            </exception>
        </member>
        <member name="M:GHSoft.Filters.ArgumentFilter.Expression(System.String,System.String)">
            <summary>
            测试一个字符串是否合法的正达表达式。
            </summary>
            <param name="argument">待验证的参数。</param>
            <param name="name">待验证的参数名。</param>
            <exception cref="T:System.ArgumentException">
            正则表达式不是一个有效的正则表达式。
            </exception>
        </member>
        <member name="M:GHSoft.Filters.ArgumentFilter.Expression(System.String,System.String,System.String)">
            <summary>
            测试一个字符串是否合法的正达表达式。
            </summary>
            <param name="argument">待验证的参数。</param>
            <param name="name">待验证的参数名。</param>
            <param name="message">自定义的异常消息。</param>
            <exception cref="T:System.ArgumentException">
            正则表达式不是一个有效的正则表达式。。
            </exception>
        </member>
        <member name="T:GHSoft.Filters.StringFilter">
            <summary>
            字符存相关验证。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/18 12:06:01</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Filters.StringFilter.IsIPAddress(System.String)">
             <summary>
             检测是否是IP地址格式  0.0.0.0
             </summary>
             <param  name="str">待判断的IP地址</param>
             <returns>如果是 IP地址 返回true，否则返回false。</returns>
        </member>
        <member name="M:GHSoft.Filters.StringFilter.IsExpression(System.String)">
            <summary>
            检测一个字符串是否是合法的正达表达式.
            </summary>
            <param name="expression">需要测试的表达式</param>
            <returns>如果是 合法的正达表达式 返回true，否则返回false。</returns>
        </member>
        <member name="M:GHSoft.Filters.StringFilter.IsDouble(System.String)">
            <summary>
            检测是否是带小数的字符
            </summary>
            <param name="str">需要检测的字符</param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Filters.StringFilter.IsNumber(System.String)">
            <summary>
            检测是否是数
            </summary>
            <param name="str">需要检测的字符</param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Filters.StringFilter.IsGB2312(System.String)">
            <summary>
            检测字符串中是否全是GB2312字符
            </summary>
            <param name="str">需要检测的字符</param>
            <returns>false：含有有非GB2312字符</returns>
        </member>
        <member name="T:GHSoft.Helper.ConvertHelper">
            <summary>
            数据类型转换助手。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/23 10:48:40</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Helper.ConvertHelper.ToInt64(System.Object)">
            <summary>
            转换成Int64类型,但不抛出异常
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.ConvertHelper.ToInt64(System.Object,System.Int64)">
            <summary>
            转换成Int64类型,但不抛出异常
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.ConvertHelper.ToInt16(System.Object)">
            <summary>
            转换成Int16类型,但不抛出异常
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.ConvertHelper.ToInt16(System.Object,System.Int16)">
            <summary>
            转换成Int16类型,但不抛出异常
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.ConvertHelper.ToInt32(System.Object)">
            <summary>
            转换成Int32类型,但不抛出异常
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.ConvertHelper.ToInt32(System.Object,System.Int32)">
            <summary>
            转换成Int32类型,但不抛出异常
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.ConvertHelper.ToDouble(System.Object)">
            <summary>
            转换成 Double 类型，但不抛出异常。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.ConvertHelper.ToDouble(System.Object,System.Double)">
            <summary>
            转换成 Double 类型，但不抛出异常。
            </summary>
            <param name="obj"></param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.ConvertHelper.ToBoolean(System.Object)">
            <summary>
            转换成 Boolean 但不抛出异常。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.ConvertHelper.ToBoolean(System.Object,System.Boolean)">
            <summary>
            转换成 Boolean 但不抛出异常。
            </summary>
            <param name="obj"></param>
            <param name="defaultDate">返回默认值</param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.ConvertHelper.ToDateTime(System.Object)">
            <summary>
            转换成DateTime,但不抛出异常
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.ConvertHelper.ToDateTime(System.Object,System.DateTime)">
            <summary>
            转换成DateTime,但不抛出异常
            </summary>
            <param name="obj"></param>
            <param name="defaultDate">返回默认值</param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.ConvertHelper.ToString(System.Object)">
            <summary>
            转换成字符串
            </summary>
            <param name="obj"></param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:GHSoft.Helper.ConvertHelper.ToString(System.Byte[])">
            <summary>
            转换成字符串
            </summary>
            <param name="cString">字节数组</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:GHSoft.Helper.ConvertHelper.ToString(System.Collections.ICollection,System.String)">
            <summary>
            将一个 ICollection 转换成字符串
            </summary>
            <param name="collection">ICollection对象</param>
            <param name="split">分隔符</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:GHSoft.Helper.ConvertHelper.ToBytes(System.String)">
            <summary>
            转换成字节数组。
            </summary>
            <param name="str">字符串</param>
            <returns>字节数组。</returns>
        </member>
        <member name="M:GHSoft.Helper.ConvertHelper.ToBytes(System.Object[])">
            <summary>
            转换成字节数组。
            </summary>
            <param name="obj">对象数组</param>
            <returns>字节数组。</returns>
        </member>
        <member name="T:GHSoft.Helper.JsonHelper">
            <summary>
            Json的辅助类
            </summary>
            <remarks>
                <para>    Creator：Gorson Ng</para>
                <para>CreatedTime：2013/10/15 15:02:12</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Helper.JsonHelper.JsonSerializer``1(``0)">
            <summary>  
            JSON序列化  
            </summary>  
        </member>
        <member name="M:GHSoft.Helper.JsonHelper.ConvertJsonDateToDateString(System.Text.RegularExpressions.Match)">
            <summary>  
            将Json序列化的时间由/Date(1294499956278+0800)转为字符串  
            </summary>  
        </member>
        <member name="T:GHSoft.Helper.PathHelper">
            <summary>
            目录操作助手。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/23 11:28:52</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Helper.PathHelper.GetFolder(System.String)">
            <summary>
            从给定文件路径提取文件夹路径。
            </summary>
            <param name="filePath">给定的文件路径。</param>
            <returns>文件夹路径。</returns>
        </member>
        <member name="M:GHSoft.Helper.PathHelper.Unify(System.String)">
            <summary>
            转换给定路径为一致的路径表示方式。
            </summary>
            <param name="path">给定的路径。</param>
            <returns>统一的路径表示方式。</returns>
        </member>
        <member name="M:GHSoft.Helper.PathHelper.Unify(System.String[])">
            <summary>
            转换给定路径数组中所有路径为一致的路径表示方式。
            </summary>
            <param name="pathes">给定的路径数组。</param>
            <returns>统一的路径表示方式。</returns>
        </member>
        <member name="M:GHSoft.Helper.PathHelper.Merge(System.String,System.String)">
            <summary>
            合并两个给定的文件路径。
            </summary>
            <param name="filePath1">前路径。</param>
            <param name="filePath2">后路径。</param>
            <returns>合并后的路径。</returns>
            <exception cref="T:System.ArgumentException">filePath2 是一个完整的路径，但 filePath1 不是。</exception> 
        </member>
        <member name="M:GHSoft.Helper.PathHelper.IsFullPath(System.String)">
            <summary>
            检测一个给定路径是否是完整路径。
            </summary>
            <param name="path">要被检测的路径。</param>
            <returns>如果是完整路径，返回true，否则返回false。</returns>
        </member>
        <member name="M:GHSoft.Helper.PathHelper.Remove(System.String,System.String)">
            <summary>
            从给定路径中，移除一个子路径。
            </summary>
            <param name="path">给定的路径。</param>
            <param name="subPath">要被移除的子路径。</param>
            <returns>修改后的路径。</returns>
        </member>
        <member name="M:GHSoft.Helper.PathHelper.Exists(System.String)">
            <summary>
            检测指定目录是否存在。
            </summary>
            <param name="strPath">目录所在绝对路径。</param>
            <rereturns>如果指定目录存在则返回true，否则返回false。</rereturns>
        </member>
        <member name="M:GHSoft.Helper.PathHelper.Delete(System.String)">
            <summary>
            从磁盘删除指定路径的目录
            </summary>
            <param name="strPath">目录所在绝对路径</param>
        </member>
        <member name="M:GHSoft.Helper.PathHelper.Create(System.String)">
            <summary>
            创建指定路径
            </summary>
            <param name="strPath">路径</param>
        </member>
        <member name="M:GHSoft.Helper.PathHelper.GetFileName(System.String)">
            <summary>
            从给定文件路径提取文件名称。
            </summary>
            <param name="filePath">给定的文件路径。</param>
            <returns>文件名称。</returns>
        </member>
        <member name="M:GHSoft.Helper.PathHelper.GetExtension(System.String)">
            <summary>
            从给定文件路径提取文件扩展名。
            </summary>
            <param name="filePath">给定的文件路径。</param>
            <returns>文件扩展名。</returns>
        </member>
        <member name="T:GHSoft.Helper.StringHelper">
            <summary>
            字符串工具
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/23 10:28:21</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Helper.StringHelper.Pad(System.String,System.Int32)">
            <summary>
            为给定字符串0位补齐
            </summary>
            <param name="str">原字符串</param>
            <param name="len">字符串期望长度</param>
            <returns>补齐后的字符串</returns>
        </member>
        <member name="M:GHSoft.Helper.StringHelper.MD5Segment(System.String,System.Int32,System.Int32)">
            <summary>
            获取MD5片段
            </summary>
            <param name="str">MD5加密前的字符串</param>
            <param name="start">截取开始位置</param>
            <param name="len">截取长度</param>
            <returns>MD5片段</returns>
        </member>
        <member name="M:GHSoft.Helper.StringHelper.ToHex(System.String)">
            <summary>
            将字符串转为16进制
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.StringHelper.Match(System.String[],System.String)">
            <summary>
            检测字符串数组，找到并返回所有符合规则的。
            </summary>
            <param name="names">字符串数组。</param>
            <param name="pattern">规则正则表达式。</param>
            <returns>所有符合规则的字符串。</returns>
        </member>
        <member name="T:GHSoft.Helper.TypeHelper">
            <summary>
            类型助手
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/18 11:54:59</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Helper.TypeHelper.GetType(System.String)">
            <summary>
            获取一个类型。
            </summary>
            <param name="name">类型名称。</param>
            <returns>名为指定名称的类型。</returns>
        </member>
        <member name="M:GHSoft.Helper.TypeHelper.InvokeByName(System.Object,System.String,GHSoft.InvokeType,System.Object[])">
            <summary>
            调用一个方法（或属性），并返回该方法（或属性）的返回值。
            </summary>
            <param name="target">目标对象。</param>
            <param name="memberName">目标成员名称。</param>
            <param name="invType">调用类型。</param>
            <param name="args">调用参数。</param>
            <returns>该方法（或属性）的返回值。</returns>
        </member>
        <member name="M:GHSoft.Helper.TypeHelper.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            调用一个方法，并返回该方法的返回值。
            </summary>
            <param name="target">目标对象。</param>
            <param name="methodName">目标方法名称。</param>
            <param name="args">调用参数。</param>
            <returns>该方法的返回值。</returns>
        </member>
        <member name="M:GHSoft.Helper.TypeHelper.CoerceValue``1(System.Type,System.Object,System.Object)">
            <summary>
            强制转换一个值，并返回转换为期望类型的值。
            </summary>
            <typeparam name="D">期望类型</typeparam>
            <param name="valueType">值类型</param>
            <param name="oldValue">原始值</param>
            <param name="value">要转换的新值。</param>
            <returns>已转换为期望类型的值。</returns>
        </member>
        <member name="M:GHSoft.Helper.TypeHelper.CoerceValue(System.Type,System.Type,System.Object,System.Object)">
            <summary>
            强制转换一个值，并返回转换为期望类型的值。
            </summary>
            <param name="desiredType">期望类型。</param>
            <param name="valueType">值类型。</param>
            <param name="oldValue">原始值。</param>
            <param name="value">要转换的新值。</param>
            <returns>已转换为期望类型的值。</returns>
            <exception cref="T:System.ArgumentNullException">
            参数 desiredType 或 valueType 为 Null。
            </exception>
        </member>
        <member name="M:GHSoft.Helper.TypeHelper.GetPropertyType(System.Type)">
            <summary>
            获取指定属性的类型。
            </summary>
            <param name="type">要检测的属性类型。</param>
            <returns>属性的类型。</returns>
            <exception cref="T:System.ArgumentNullException">
            参数 property 为 Null。
            </exception>
        </member>
        <member name="M:GHSoft.Helper.TypeHelper.GetProperties(System.Type)">
            <summary>
            以数组的形式取得属性列表
            </summary>
            <param name="sourceType">源对象类型</param>
            <returns>数组的形式的属性列表</returns>
        </member>
        <member name="M:GHSoft.Helper.TypeHelper.GetValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            获取值
            </summary>
            <param name="member"></param>
            <param name="source"></param>
        </member>
        <member name="M:GHSoft.Helper.TypeHelper.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="target">目标对象</param>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:GHSoft.Helper.TypeHelper.SetFieldValue(System.Object,System.String,System.Object)">
            <summary>
            设置字段值
            </summary>
            <param name="target"></param>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="M:GHSoft.Helper.TypeHelper.SetValue(System.Object,System.Reflection.MemberInfo,System.Object)">
            <summary>
            设置值
            </summary>
            <param name="target">目标对象</param>
            <param name="memberInfo">成员信息</param>
            <param name="value">值</param>
        </member>
        <member name="T:GHSoft.InvokeType">
            <summary>
            调用类型
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/18 12:01:53</para>
            </remarks>
        </member>
        <member name="F:GHSoft.InvokeType.Get">
            <summary>
            获取一个属性值
            </summary>
        </member>
        <member name="F:GHSoft.InvokeType.Invoke">
            <summary>
            调用一个方法
            </summary>
        </member>
        <member name="F:GHSoft.InvokeType.AsyncInvoke">
            <summary>
            调用执行一个方法
            </summary>
        </member>
        <member name="F:GHSoft.InvokeType.Set">
            <summary>
            设置属性值
            </summary>
        </member>
        <member name="T:GHSoft.Helper.WebApiHelper">
            <summary>
            WebApi 请求/处理 Helper类
            </summary>
            <remarks>
                <para>    Creator：Gorson Ng</para>
                <para>CreatedTime：2013/9/18 15:09:07</para>
            </remarks>	
        </member>
        <member name="M:GHSoft.Helper.WebApiHelper.GetDataForJson``1(System.String,System.String)">
            <summary>
            获取WebApi数据
            </summary>
            <typeparam name="T">返回数据对象</typeparam>
            <param name="url">Web Api 地址</param>
            <param name="token">Token</param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.WebApiHelper.PostDate``2(System.String,``0,GHSoft.Helper.WebApiActionEnum,System.String)">
            <summary>
            提交数据
            </summary>
            <typeparam name="TInput">提交数据类型</typeparam>
            <typeparam name="TOutPut">输出数据类型</typeparam>
            <param name="data">数据</param>
            <param name="url">WebApi地址</param>
            <param name="action">动作 提供Post Put Delete </param>
            <param name="token">Token</param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.WebApiHelper.PostDate``1(System.String,GHSoft.Helper.WebApiActionEnum,System.String)">
            <summary>
            提交数据
            </summary> 
            <typeparam name="TOutPut">输出数据类型</typeparam> 
            <param name="url">WebApi地址</param>
            <param name="action">动作 提供Post Put Delete </param>
            <param name="param">参数</param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.WebApiHelper.Login``1(System.String,System.String,System.String,GHSoft.Helper.WebApiActionEnum)">
            <summary>
            登录获取Token
            </summary>
            <typeparam name="TOutPut">返回结果对象</typeparam>
            <param name="url">Url地址</param>
            <param name="userName">用户名</param>
            <param name="paw">密码</param>
            <param name="action">动作</param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.WebApiHelper.RefreshToken``1(System.String,System.String,System.String,GHSoft.Helper.WebApiActionEnum)">
            <summary>
            刷新令牌
            </summary>
            <typeparam name="TOutPut">返回类型</typeparam>
            <param name="url">URL</param>
            <param name="clientId">客户端ID</param>
            <param name="code">刷新令牌</param>
            <param name="action">动作</param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.WebApiHelper.GetWebApiAction(GHSoft.Helper.WebApiActionEnum)">
            <summary>
            获取WebApi动作
            </summary>
            <param name="action">动作枚举</param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.WebApiHelper.GetHtmlSource(System.String,System.Text.Encoding,System.String)">
            <summary>
            取得接口内容
            </summary>
            <param name="url"></param>
            <param name="encode"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.WebApiHelper.IsHaveUrlParameter(System.String)">
            <summary>
            Url是否有参数
            </summary>
            <param name="str">当前字符串</param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.WebApiHelper.WebApiAddress(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            拼接 Web Api 地址
            </summary>
            <param name="webApiRoot">API根地址</param>
            <param name="nodeApi">API节点</param>
            <param name="queryParm">参数</param>
            <returns></returns>
        </member>
        <member name="T:GHSoft.Helper.WebApiActionEnum">
            <summary>
            WebApi 动作
            </summary>
            <remarks>
                <para>    Creator：LHC</para>
                <para>CreatedTime：2013/9/22 14:11:47</para>
            </remarks>	
        </member>
        <member name="F:GHSoft.Helper.WebApiActionEnum.Post">
            <summary>
            Post
            </summary>
        </member>
        <member name="F:GHSoft.Helper.WebApiActionEnum.Put">
            <summary>
            Put
            </summary>
        </member>
        <member name="F:GHSoft.Helper.WebApiActionEnum.Delete">
            <summary>
            Delete
            </summary>
        </member>
        <member name="T:GHSoft.Helper.XMLHelper">
            <summary>
            读取XML 常用的一些方法
            <para>创建人：Gorson</para>
            <para>创建时间：10/26/2010 14:25:51</para>
            <para>修改人: 贺隽</para>
            <para>修改时间: 2012-7-17 09:21:16</para>
            </summary>
        </member>
        <member name="M:GHSoft.Helper.XMLHelper.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:GHSoft.Helper.XMLHelper.GetXmlNodeByXpath(System.String,System.String,System.Boolean)">
            <summary>
            选择匹配XPath表达式的第一个节点XmlNode.
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"/节点名/子节点名")</param>
            <param name="isPath">传递的xmlFileName是文件路径还是xml</param> Add by Frank@2012/5/31
            <returns>返回XmlNode</returns>
        </member>
        <member name="M:GHSoft.Helper.XMLHelper.GetXmlNodeListByXpath(System.String,System.String,System.Boolean)">
            <summary>
            选择匹配XPath表达式的节点列表XmlNodeList.
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"/节点名/子节点名")</param>
            <param name="isPath">传递的xmlFileName是文件路径还是xml</param> Add by Frank@2012/5/31
            <returns>返回XmlNodeList</returns>
        </member>
        <member name="M:GHSoft.Helper.XMLHelper.GetXmlNodeListByXpath(System.Xml.XmlNode,System.String)">
            <summary>
            选择匹配XPath表达式的节点列表XmlNodeList.
            </summary>
            <param name="node">节点</param>
            <param name="xpath">要匹配的XPath表达式(例如:"/节点名/子节点名")</param>
            <returns>返回XmlNodeList</returns>
        </member>
        <member name="M:GHSoft.Helper.XMLHelper.GetXmlAttribute(System.String,System.String,System.String,System.Boolean)">
            <summary>
            选择匹配XPath表达式的第一个节点的匹配xmlAttributeName的属性XmlAttribute.
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"/节点名/子节点名</param>
            <param name="xmlAttributeName">要匹配xmlAttributeName的属性名称</param>
            <param name="isPath">传递的xmlFileName是文件路径还是xml</param> Add by Frank@2012/5/31
            <returns>返回xmlAttributeName</returns>
        </member>
        <member name="M:GHSoft.Helper.XMLHelper.CreateXmlDocument(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            创建一个XML文档
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="rootNodeName">XML文档根节点名称(须指定一个根节点名称)</param>
            <param name="version">XML文档版本号(必须为:"1.0")</param>
            <param name="encoding">XML文档编码方式</param>
            <param name="standalone">该值必须是"yes"或"no",如果为null,Save方法不在XML声明上写出独立属性</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:GHSoft.Helper.XMLHelper.CreateXmlNodeByXPath(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            依据匹配XPath表达式的第一个节点来创建它的子节点(如果此节点已存在则追加一个新的同名节点
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlNodeName">要匹配xmlNodeName的节点名称</param>
            <param name="innerText">节点文本值</param>
            <param name="xmlAttributeName">要匹配xmlAttributeName的属性名称</param>
            <param name="value">属性值</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:GHSoft.Helper.XMLHelper.CreateOrUpdateXmlNodeByXPath(System.String,System.String,System.String,System.String)">
            <summary>
            依据匹配XPath表达式的第一个节点来创建或更新它的子节点(如果节点存在则更新,不存在则创建)
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlNodeName">要匹配xmlNodeName的节点名称</param>
            <param name="innerText">节点文本值</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:GHSoft.Helper.XMLHelper.CreateOrUpdateXmlAttributeByXPath(System.String,System.String,System.String,System.String)">
            <summary>
            依据匹配XPath表达式的第一个节点来创建或更新它的属性(如果属性存在则更新,不存在则创建)
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlAttributeName">要匹配xmlAttributeName的属性名称</param>
            <param name="value">属性值</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:GHSoft.Helper.XMLHelper.DeleteXmlNodeByXPath(System.String,System.String)">
            <summary>
            删除匹配XPath表达式的第一个节点(节点中的子元素同时会被删除)
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:GHSoft.Helper.XMLHelper.DeleteXmlAttributeByXPath(System.String,System.String,System.String)">
            <summary>
            删除匹配XPath表达式的第一个节点中的匹配参数xmlAttributeName的属性
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlAttributeName">要删除的xmlAttributeName的属性名称</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:GHSoft.Helper.XMLHelper.DeleteAllXmlAttributeByXPath(System.String,System.String)">
            <summary>
            删除匹配XPath表达式的第一个节点中的所有属性
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:GHSoft.Helper.XMLHelper.GetDataSetInfo(System.String)">
            <summary>
            获取XML的DataSet对象
            </summary>
            <param name="xmlPath"></param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.XMLHelper.GetStreamReader(System.String)">
            <summary>
            读取XML为StreamReader
            </summary>
            <param name="xmlPath"></param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.XMLHelper.IsUTF8(System.String)">
            <summary>
            判断文件格式是否为UTF8
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.XMLHelper.LoadXmlFile(System.String)">
            <summary>
            加载XML为节点对象
            </summary>
            <param name="xmlPath"></param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.XMLHelper.GetXElementByAttribute(System.Xml.Linq.XElement,System.String,System.String,System.String)">
            <summary>
            获取XML子节点对象
            </summary>
            <param name="parentNode"></param>
            <param name="groupName"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.XMLHelper.SetXElementAttributeValue(System.Xml.Linq.XElement,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            设置子对象值是否成功
            </summary>
            <param name="parentNode"></param>
            <param name="groupName"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="sSetName"></param>
            <param name="sSetValue"></param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.XMLHelper.GetXElementAttributeValue(System.Xml.Linq.XElement,System.String,System.String,System.String,System.String)">
            <summary>
            获取子对象节点的值
            </summary>
            <param name="parentNode"></param>
            <param name="groupName"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="sGetAttName"></param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Helper.XMLHelper.XElementToDataSet(System.Xml.Linq.XElement,System.Data.DataSet,System.Int32@)">
            <summary>
            把XML转换为DataSet
            </summary>
            <param name="x"></param>
            <param name="ds"></param>
            <param name="TID"></param>
        </member>
        <member name="M:GHSoft.Helper.XMLHelper.CreateDataTableAutoIncrementColumn(System.Data.DataTable,System.String)">
            <summary>
            创建列
            </summary>
            <param name="dt"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="T:GHSoft.Logging.LogLevel">
            <summary>
            表示日志的级别。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/23 16:09:50</para>
            </remarks>
        </member>
        <member name="F:GHSoft.Logging.LogLevel.Info">
            <summary>
            普通信息
            </summary>
        </member>
        <member name="F:GHSoft.Logging.LogLevel.Trace">
            <summary>
            运行轨迹
            </summary>
        </member>
        <member name="F:GHSoft.Logging.LogLevel.Warning">
            <summary>
            警告信息
            </summary>
        </member>
        <member name="F:GHSoft.Logging.LogLevel.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:GHSoft.Logging.LogLevel.Error">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="F:GHSoft.Logging.LogLevel.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="T:GHSoft.Logging.ILogRecord">
            <summary>
            表示一个日志记录。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/23 16:11:15</para>
            </remarks>
        </member>
        <member name="P:GHSoft.Logging.ILogRecord.Assembly">
            <summary>
            是否提供应用程序友好名称
            </summary>
        </member>
        <member name="P:GHSoft.Logging.ILogRecord.Category">
            <summary>
            日志分类
            </summary>
        </member>
        <member name="P:GHSoft.Logging.ILogRecord.ID">
            <summary>
            日志ID
            </summary>
        </member>
        <member name="P:GHSoft.Logging.ILogRecord.Level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:GHSoft.Logging.ILogRecord.LogTime">
            <summary>
            日志时间
            </summary>
        </member>
        <member name="P:GHSoft.Logging.ILogRecord.Message">
            <summary>
            日志信息
            </summary>
        </member>
        <member name="P:GHSoft.Logging.ILogRecord.Source">
            <summary>
            日志来源
            </summary>
        </member>
        <member name="P:GHSoft.Logging.ILogRecord.Title">
            <summary>
            日志标题
            </summary>
        </member>
        <member name="T:GHSoft.Logging.LogRecord">
            <summary>
            日志记录实体类。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/23 16:11:15</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Logging.LogRecord.#ctor">
            <summary>
            日志记录
            </summary>
        </member>
        <member name="P:GHSoft.Logging.LogRecord.ID">
            <summary>
            日志ID
            </summary>
        </member>
        <member name="P:GHSoft.Logging.LogRecord.Title">
            <summary>
            日志标题
            </summary>
        </member>
        <member name="P:GHSoft.Logging.LogRecord.Category">
            <summary>
            日志分类
            </summary>
        </member>
        <member name="P:GHSoft.Logging.LogRecord.Level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:GHSoft.Logging.LogRecord.LogTime">
            <summary>
            日志时间
            </summary>
        </member>
        <member name="P:GHSoft.Logging.LogRecord.Message">
            <summary>
            日志信息
            </summary>
        </member>
        <member name="P:GHSoft.Logging.LogRecord.Source">
            <summary>
            日志来源
            </summary>
        </member>
        <member name="P:GHSoft.Logging.LogRecord.Assembly">
            <summary>
            是否提供应用程序友好名称
            </summary>
        </member>
        <member name="T:GHSoft.Logging.GHLogging">
            <summary>
            日志记录上下文对象。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/23 17:32:37</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.GetListener(System.String)">
            <summary>
            获取缓存的存储提供者。
            </summary>
            <param name="name">提供者名称。</param>
            <returns>一个用于存储缓存项的 <see cref="T:GHSoft.Logging.ILogListener"/>实例。</returns>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Add(System.String,GHSoft.Logging.ILogListener)">
            <summary>
            添加一个 <see cref="T:GHSoft.Logging.ILogListener"/> 元素到列表中
            </summary>
            <param name="name">缓存体Key</param>
            <param name="logListener">缓存体</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.SetLevel(GHSoft.Logging.LogLevel)">
            <summary>
            修改全部监听器的日志输出级别
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Log(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个日志记录。
            </summary>
            <param name="logRecord">日志记录。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Log(System.Collections.Generic.List{GHSoft.Logging.LogRecord})">
            <summary>
            批量写出日志记录。
            </summary>
            <param name="loglist">日志记录列表。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Log(System.String,System.String,System.String,GHSoft.Logging.LogLevel,System.String)">
            <summary>
            写出一个日志记录。1
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
            <param name="level">日志输出等级。</param>
            <param name="source">日志来源。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Log(System.String,System.String,GHSoft.Logging.LogLevel)">
            <summary>
            写出一个日志记录。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="level">日志输出等级。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Info(System.String,System.String,System.String,System.String)">
            <summary>
            写出一个普通信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
            <param name="source">日志来源。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Info(System.String,System.String,System.String)">
            <summary>
            写出一个普通信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Info(System.String,System.String)">
            <summary>
            写出一个普通信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Info(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个普通信息。
            </summary>
            <param name="logRecord">日志记录。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Trace(System.String,System.String,System.String,System.String)">
            <summary>
            写出一个运行轨迹信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
            <param name="source">日志来源。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Trace(System.String,System.String,System.String)">
            <summary>
            写出一个运行轨迹信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Trace(System.String,System.String)">
            <summary>
            写出一个运行轨迹信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Trace(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个运行轨迹信息。
            </summary>
            <param name="logRecord">日志记录。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Warning(System.String,System.String,System.String,System.String)">
            <summary>
            写出一个警告信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
            <param name="source">日志来源。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Warning(System.String,System.String,System.String)">
            <summary>
            写出一个警告信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Warning(System.String,System.String)">
            <summary>
            写出一个警告信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Warning(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个警告信息。
            </summary>
            <param name="logRecord">日志记录。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Unknown(System.String,System.String,System.String,System.String)">
            <summary>
            写出一个未知种类信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
            <param name="source">日志来源。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Unknown(System.String,System.String,System.String)">
            <summary>
            写出一个未知种类信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Unknown(System.String,System.String)">
            <summary>
            写出一个未知种类信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Unknown(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个未知种类信息。
            </summary>
            <param name="logRecord">日志记录。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Error(System.String,System.String,System.String,System.String)">
            <summary>
            写出一个错误信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
            <param name="source">日志来源。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Error(System.String,System.String,System.String)">
            <summary>
            写出一个错误信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Error(System.String,System.String)">
            <summary>
            写出一个错误信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Error(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个错误信息。
            </summary>
            <param name="logRecord">日志记录。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Fatal(System.String,System.String,System.String,System.String)">
            <summary>
            写出一个致命错误信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
            <param name="source">日志来源。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Fatal(System.String,System.String,System.String)">
            <summary>
            写出一个致命错误信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Fatal(System.String,System.String)">
            <summary>
            写出一个致命错误信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Fatal(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个致命错误信息。
            </summary>
            <param name="logRecord">日志记录。</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Parse(System.Exception)">
            <summary>
            分析错误对象,根据错误对象写出日志
            </summary>
            <param name="exception">要分析的错误对象.</param>
            <remarks>
            <code>
            //使用的时候,需要在<see cref="T:System.Exception"/>对象的 Data 属性中，加入几个信息：
            try {
            	...
            }
            catch( System.Exception se ) {
            	se.Data.Add( "Level", LogLevel.Error );								//错误等级
            	se.Data.Add( "Category", "GHSoft.DTO.GetModel" );					//日志分类
            	se.Data.Add( "Title", "GetModel( selector,select,values )::Where" );//日志标题
            	LogContext.Instance[ "DatabaseLog" ].Parse( se );
            }
            </code>
            </remarks>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Parse(GHSoft.Logging.LogLevel,System.String,System.String,System.Exception)">
            <summary>
            分析错误对象,根据错误对象写出日志
            </summary>
            <param name="level">异常等级</param>
            <param name="category">异常分类</param>
            <param name="title">异常主题</param>
            <param name="exception">异常对象</param>
        </member>
        <member name="M:GHSoft.Logging.GHLogging.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="P:GHSoft.Logging.GHLogging.isOpen">
            <summary>
            是否打开日志写出。
            </summary>
        </member>
        <member name="P:GHSoft.Logging.GHLogging.Instance">
            <summary>
            获取实例
            </summary>
        </member>
        <member name="P:GHSoft.Logging.GHLogging.Item(System.String)">
            <summary>
            获取缓存提供者
            </summary>
            <param name="key">提供者 Key</param>
            <returns>一个用于存储缓存项的 <see cref="T:GHSoft.Logging.ILogListener"/>实例。</returns>
        </member>
        <member name="T:GHSoft.Logging.FileListener">
            <summary>
            日志监听器 文本文件接收者
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/23 16:58:37</para>
            </remarks>
        </member>
        <member name="T:GHSoft.Logging.LogListenerBase">
            <summary>
            日志监听器基类
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/23 16:30:53</para>
            </remarks>
        </member>
        <member name="T:GHSoft.Logging.ILogListener">
            <summary>
            日志监听器的抽象接口
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/23 16:18:44</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Logging.ILogListener.Log(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个日志记录。
            </summary>
            <param name="logRecord">日志记录。</param>
        </member>
        <member name="M:GHSoft.Logging.ILogListener.Log(System.String,System.String,System.String,GHSoft.Logging.LogLevel,System.String)">
            <summary>
            写出一个日志记录。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
            <param name="level">日志输出等级。</param>
            <param name="source">日志来源。</param>
        </member>
        <member name="M:GHSoft.Logging.ILogListener.Log(System.Collections.Generic.List{GHSoft.Logging.LogRecord})">
            <summary>
            批量写出日志记录。
            </summary>
            <param name="loglist">日志记录列表。</param>
        </member>
        <member name="M:GHSoft.Logging.ILogListener.Info(System.String,System.String,System.String,System.String)">
            <summary>
            写出一个普通信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
            <param name="source">日志来源。</param>
        </member>
        <member name="M:GHSoft.Logging.ILogListener.Info(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个普通信息。
            </summary>
            <param name="logRecord">日志记录。</param>
        </member>
        <member name="M:GHSoft.Logging.ILogListener.Trace(System.String,System.String,System.String,System.String)">
            <summary>
            写出一个运行轨迹信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
            <param name="source">日志来源。</param>
        </member>
        <member name="M:GHSoft.Logging.ILogListener.Trace(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个运行轨迹信息。
            </summary>
            <param name="logRecord">日志记录。</param>
        </member>
        <member name="M:GHSoft.Logging.ILogListener.Warning(System.String,System.String,System.String,System.String)">
            <summary>
            写出一个警告信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
            <param name="source">日志来源。</param>
        </member>
        <member name="M:GHSoft.Logging.ILogListener.Warning(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个警告信息。
            </summary>
            <param name="logRecord">日志记录。</param>
        </member>
        <member name="M:GHSoft.Logging.ILogListener.Unknown(System.String,System.String,System.String,System.String)">
            <summary>
            写出一个未知种类信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
            <param name="source">日志来源。</param>
        </member>
        <member name="M:GHSoft.Logging.ILogListener.Unknown(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个未知种类信息。
            </summary>
            <param name="logRecord">日志记录。</param>
        </member>
        <member name="M:GHSoft.Logging.ILogListener.Error(System.String,System.String,System.String,System.String)">
            <summary>
            写出一个错误信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
            <param name="source">日志来源。</param>
        </member>
        <member name="M:GHSoft.Logging.ILogListener.Error(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个错误信息。
            </summary>
            <param name="logRecord">日志记录。</param>
        </member>
        <member name="M:GHSoft.Logging.ILogListener.Fatal(System.String,System.String,System.String,System.String)">
            <summary>
            写出一个致命错误信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
            <param name="source">日志来源。</param>
        </member>
        <member name="M:GHSoft.Logging.ILogListener.Fatal(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个致命错误信息。
            </summary>
            <param name="logRecord">日志记录。</param>
        </member>
        <member name="M:GHSoft.Logging.ILogListener.Parse(System.Exception)">
            <summary>
            分析错误对象,根据错误对象写出日志
            </summary>
            <param name="exception">要分析的错误对象.</param>
            <remarks>
            <code>
            //使用的时候,需要在<see cref="T:System.Exception"/>对象的 Data 属性中，加入几个信息：
            try {
            	...
            }
            catch( System.Exception se ) {
            	se.Data.Add( "Level", LogLevel.Error );								//错误等级
            	se.Data.Add( "Category", "GHSoft.DTO.GetModel" );					//日志分类
            	se.Data.Add( "Title", "GetModel( selector,select,values )::Where" );//日志标题
            	LogContext.Instance[ "DatabaseLog" ].Parse( se );
            }
            </code>
            </remarks>
        </member>
        <member name="M:GHSoft.Logging.ILogListener.Parse(GHSoft.Logging.LogLevel,System.String,System.String,System.Exception)">
            <summary>
            分析错误对象,根据错误对象写出日志
            </summary>
            <param name="level">异常等级</param>
            <param name="category">异常分类</param>
            <param name="title">异常主题</param>
            <param name="exception">异常对象</param>
        </member>
        <member name="P:GHSoft.Logging.ILogListener.Level">
            <summary>
            日志级别
            监听器将记录同等和高于此级别的日志
            </summary>
        </member>
        <member name="P:GHSoft.Logging.ILogListener.Name">
            <summary>
            记录器名称。
            </summary>
        </member>
        <member name="P:GHSoft.Logging.ILogListener.Category">
            <summary>
            日志分类。
            </summary>
        </member>
        <member name="P:GHSoft.Logging.ILogListener.Target">
            <summary>
            记录目标
            </summary>
        </member>
        <member name="M:GHSoft.Logging.LogListenerBase.Log(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个日志记录。
            </summary>
            <param name="logRecord">日志记录。</param>
        </member>
        <member name="M:GHSoft.Logging.LogListenerBase.Log(System.Collections.Generic.List{GHSoft.Logging.LogRecord})">
            <summary>
            批量写出日志记录。
            </summary>
            <param name="loglist">日志记录列表。</param>
        </member>
        <member name="M:GHSoft.Logging.LogListenerBase.Log(System.String,System.String,System.String,GHSoft.Logging.LogLevel,System.String)">
            <summary>
            写出一个日志记录。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
            <param name="level">日志输出等级。</param>
            <param name="source">日志来源。</param>
        </member>
        <member name="M:GHSoft.Logging.LogListenerBase.Info(System.String,System.String,System.String,System.String)">
            <summary>
            写出一个普通信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
            <param name="source">日志来源。</param>
        </member>
        <member name="M:GHSoft.Logging.LogListenerBase.Info(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个普通信息。
            </summary>
            <param name="logRecord">日志记录。</param>
        </member>
        <member name="M:GHSoft.Logging.LogListenerBase.Trace(System.String,System.String,System.String,System.String)">
            <summary>
            写出一个运行轨迹信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
            <param name="source">日志来源。</param>
        </member>
        <member name="M:GHSoft.Logging.LogListenerBase.Trace(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个运行轨迹信息。
            </summary>
            <param name="logRecord">日志记录。</param>
        </member>
        <member name="M:GHSoft.Logging.LogListenerBase.Warning(System.String,System.String,System.String,System.String)">
            <summary>
            写出一个警告信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
            <param name="source">日志来源。</param>
        </member>
        <member name="M:GHSoft.Logging.LogListenerBase.Warning(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个警告信息。
            </summary>
            <param name="logRecord">日志记录。</param>
        </member>
        <member name="M:GHSoft.Logging.LogListenerBase.Unknown(System.String,System.String,System.String,System.String)">
            <summary>
            写出一个未知种类信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
            <param name="source">日志来源。</param>
        </member>
        <member name="M:GHSoft.Logging.LogListenerBase.Unknown(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个未知种类信息。
            </summary>
            <param name="logRecord">日志记录。</param>
        </member>
        <member name="M:GHSoft.Logging.LogListenerBase.Error(System.String,System.String,System.String,System.String)">
            <summary>
            写出一个错误信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
            <param name="source">日志来源。</param>
        </member>
        <member name="M:GHSoft.Logging.LogListenerBase.Error(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个错误信息。
            </summary>
            <param name="logRecord">日志记录。</param>
        </member>
        <member name="M:GHSoft.Logging.LogListenerBase.Fatal(System.String,System.String,System.String,System.String)">
            <summary>
            写出一个致命错误信息。
            </summary>
            <param name="message">日志内容。</param>
            <param name="title">日志主题。</param>
            <param name="category">日志分类。</param>
            <param name="source">日志来源。</param>
        </member>
        <member name="M:GHSoft.Logging.LogListenerBase.Fatal(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个致命错误信息。
            </summary>
            <param name="logRecord">日志记录。</param>
        </member>
        <member name="M:GHSoft.Logging.LogListenerBase.Parse(System.Exception)">
            <summary>
            分析错误对象,根据错误对象写出日志
            </summary>
            <param name="exception">要分析的错误对象.</param>
            <remarks>
            <code>
            //使用的时候,需要在<see cref="T:System.Exception"/>对象的 Data 属性中，加入几个信息：
            try {
            	...
            }
            catch( System.Exception se ) {
            	se.Data.Add( "Level", LogLevel.Error );								//错误等级
            	se.Data.Add( "Category", "GHSoft.DTO.GetModel" );					//日志分类
            	se.Data.Add( "Title", "GetModel( selector,select,values )::Where" );//日志标题
            	LogContext.Instance[ "DatabaseLog" ].Parse( se );
            }
            </code>
            </remarks>
        </member>
        <member name="M:GHSoft.Logging.LogListenerBase.Parse(GHSoft.Logging.LogLevel,System.String,System.String,System.Exception)">
            <summary>
            分析错误对象,根据错误对象写出日志
            </summary>
            <param name="level">异常等级</param>
            <param name="category">异常分类</param>
            <param name="title">异常主题</param>
            <param name="exception">异常对象</param>
        </member>
        <member name="M:GHSoft.Logging.LogListenerBase.Write(System.Collections.Generic.List{GHSoft.Logging.LogRecord})">
            <summary>
            写出多条信息
            </summary>
            <param name="loglist">日志记录集合</param>
        </member>
        <member name="M:GHSoft.Logging.LogListenerBase.Write(GHSoft.Logging.LogRecord)">
            <summary>
            写出信息
            </summary>
            <param name="logRecord">日志记录</param>
        </member>
        <member name="P:GHSoft.Logging.LogListenerBase.Level">
            <summary>
            日志级别
            监听器将记录同等和高于此级别的日志
            </summary>
        </member>
        <member name="P:GHSoft.Logging.LogListenerBase.Name">
            <summary>
            记录器名称。
            </summary>
        </member>
        <member name="P:GHSoft.Logging.LogListenerBase.Category">
            <summary>
            日志分类。
            </summary>
        </member>
        <member name="P:GHSoft.Logging.LogListenerBase.Target">
            <summary>
            记录目标
            </summary>
        </member>
        <member name="M:GHSoft.Logging.FileListener.#ctor">
            <summary>
            创建一个文件接收者的实例。
            </summary>
        </member>
        <member name="M:GHSoft.Logging.FileListener.#ctor(System.String)">
            <summary>
            创建一个文件接收者的实例。
            </summary>
            <param name="fileName">日志文件名</param>
        </member>
        <member name="M:GHSoft.Logging.FileListener.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:GHSoft.Logging.FileListener.CreateString(GHSoft.Logging.LogRecord)">
            <summary>
            创建字符格式
            </summary>
            <param name="logRecord"></param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Logging.FileListener.Write(System.Collections.Generic.List{GHSoft.Logging.LogRecord})">
            <summary>
            写出一个日志记录列表
            </summary>
            <param name="loglist">日志记录列表</param>
        </member>
        <member name="M:GHSoft.Logging.FileListener.Write(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个日志记录,并将文件指针移动到下一行.
            </summary>
            <param name="logRecord">日志记录</param>
        </member>
        <member name="T:GHSoft.Logging.XmlListener">
            <summary>
            XML文件接收者
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/23 16:51:28</para>
            </remarks>
        </member>
        <member name="F:GHSoft.Logging.XmlListener.xmldoc">
             <summary>
            
             </summary>
        </member>
        <member name="M:GHSoft.Logging.XmlListener.#ctor">
            <summary>
            创建一个XML文件接收者的实例。
            </summary>
        </member>
        <member name="M:GHSoft.Logging.XmlListener.#ctor(System.String)">
            <summary>
            创建一个XML文件接收者的实例
            </summary>
            <param name="fileName">日志文件名</param>
        </member>
        <member name="M:GHSoft.Logging.XmlListener.Write(System.Collections.Generic.List{GHSoft.Logging.LogRecord})">
            <summary>
            写出一个日志记录列表
            </summary>
            <param name="loglist">日志记录列表</param>
        </member>
        <member name="M:GHSoft.Logging.XmlListener.Write(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个日志记录,并将文件指针移动到下一行.
            </summary>
            <param name="logRecord">日志记录</param>
        </member>
        <member name="M:GHSoft.Logging.XmlListener.WriteXML(GHSoft.Logging.LogRecord)">
            <summary>
            写出一条XML日志记录
            </summary>
            <param name="logRecord">日记记录对象</param>
        </member>
        <member name="T:GHSoft.Logging.DefaultListener">
            <summary>
            日志监听器 文本文件接收者
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/23 16:58:37</para>
            </remarks>
        </member>
        <member name="F:GHSoft.Logging.DefaultListener.writer">
            <summary>
            文件操作流
            </summary>
        </member>
        <member name="M:GHSoft.Logging.DefaultListener.#ctor">
            <summary>
            创建一个文件接收者的实例。
            </summary>
        </member>
        <member name="M:GHSoft.Logging.DefaultListener.#ctor(System.String)">
            <summary>
            创建一个文件接收者的实例。
            </summary>
            <param name="basePath">基础目录</param>
        </member>
        <member name="M:GHSoft.Logging.DefaultListener.CreateString(GHSoft.Logging.LogRecord)">
            <summary>
            创建字符格式
            </summary>
            <param name="logRecord"></param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Logging.DefaultListener.getFilePathByTime(GHSoft.Logging.LogRecord)">
            <summary>
            按照时间获取路径
            </summary>
            <param name="logRecord"></param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Logging.DefaultListener.Write(System.Collections.Generic.List{GHSoft.Logging.LogRecord})">
            <summary>
            写出一个日志记录列表
            </summary>
            <param name="loglist">日志记录列表</param>
        </member>
        <member name="M:GHSoft.Logging.DefaultListener.Write(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个日志记录,并将文件指针移动到下一行.
            </summary>
            <param name="logRecord">日志记录</param>
        </member>
        <member name="T:GHSoft.Logging.TextFileListener">
            <summary>
            日志监听器 文本文件接收者
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/23 16:58:37</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Logging.TextFileListener.#ctor">
            <summary>
            创建一个文件接收者的实例。
            </summary>
        </member>
        <member name="M:GHSoft.Logging.TextFileListener.#ctor(System.String)">
            <summary>
            创建一个文件接收者的实例。
            </summary>
            <param name="filePath">日志文件名</param>
        </member>
        <member name="M:GHSoft.Logging.TextFileListener.#ctor(System.String,System.Int32)">
            <summary>
            创建一个文件接收者的实例。
            </summary>
            <param name="filePath">日志文件名</param>
            <param name="max">最大文本行数</param>
        </member>
        <member name="M:GHSoft.Logging.TextFileListener.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:GHSoft.Logging.TextFileListener.CreateString(GHSoft.Logging.ILogRecord)">
            <summary>
            创建单行字符串格式
            </summary>
            <param name="logRecord"></param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Logging.TextFileListener.createFile">
            <summary>
            创建新文件
            </summary>
        </member>
        <member name="M:GHSoft.Logging.TextFileListener.getFilePathByDate">
            <summary>
            按照时间获取路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Logging.TextFileListener.Write(System.Collections.Generic.List{GHSoft.Logging.LogRecord})">
            <summary>
            写出一个日志记录列表
            </summary>
            <param name="loglist">日志记录列表</param>
        </member>
        <member name="M:GHSoft.Logging.TextFileListener.Write(GHSoft.Logging.LogRecord)">
            <summary>
            写出一个日志记录,并将文件指针移动到下一行.
            </summary>
            <param name="logRecord">日志记录</param>
        </member>
        <member name="P:GHSoft.Logging.TextFileListener.SyncRoot">
            <summary>
            获取一个可用于同步对的访问的对象。
            </summary>
        </member>
        <member name="P:GHSoft.Logging.TextFileListener.MaxCount">
            <summary>
            监听器所允许的单个文件的最大行数
            </summary>
        </member>
        <member name="P:GHSoft.Logging.TextFileListener.LineCount">
            <summary>
            获取当前行数
            </summary>
        </member>
        <member name="T:GHSoft.Logging.LogHandler">
            <summary>
            日志配置 Section
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/24 9:46:29</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Logging.LogHandler.Parse(System.Xml.XmlNode)">
            <summary>
            分析节点
            </summary>
            <param name="node">节点</param>
        </member>
        <member name="T:GHSoft.Serials.SerialType">
            <summary>
            序号产生类型
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/18 16:21:11</para>
            </remarks>
        </member>
        <member name="F:GHSoft.Serials.SerialType.Temp">
            <summary>
            不保存的临时规则
            </summary>
        </member>
        <member name="F:GHSoft.Serials.SerialType.Count">
            <summary>
            普通计数型序号
            </summary>
        </member>
        <member name="F:GHSoft.Serials.SerialType.Date">
            <summary>
            日期型序号
            </summary>
        </member>
        <member name="F:GHSoft.Serials.SerialType.HEX">
            <summary>
            16进制序号
            </summary>
        </member>
        <member name="F:GHSoft.Serials.SerialType.MD5">
            <summary>
            MD5型序号
            </summary>
        </member>
        <member name="F:GHSoft.Serials.SerialType.Prefix">
            <summary>
            前缀型序号
            </summary>
        </member>
        <member name="F:GHSoft.Serials.SerialType.Rand">
            <summary>
            随机型序号
            </summary>
        </member>
        <member name="T:GHSoft.Serials.RuleFuncType">
            <summary>
            规则的功能类型
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/18 16:21:11</para>
            </remarks>
        </member>
        <member name="F:GHSoft.Serials.RuleFuncType.Value">
            <summary>
            值型
            </summary>
        </member>
        <member name="F:GHSoft.Serials.RuleFuncType.Function">
            <summary>
            运行函数
            </summary>
        </member>
        <member name="T:GHSoft.Serials.SerialCallback">
            <summary>
            序号生成函数委托
            </summary>
            <param name="item">序号规则实体</param>
            <returns>生成的序号</returns>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/18 16:21:11</para>
            </remarks>
        </member>
        <member name="T:GHSoft.Serials.GHSerial">
            <summary>
            光汇序号生成器对象。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/23 14:16:04</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Serials.GHSerial.Add(System.String,GHSoft.Serials.ISerialService)">
            <summary>
            添加序号工厂
            </summary>
            <param name="name">工厂名称</param>
            <param name="factory">工厂</param>
        </member>
        <member name="M:GHSoft.Serials.GHSerial.Remove(System.String)">
            <summary>
            移除
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:GHSoft.Serials.GHSerial.Save">
            <summary>
            保存所有序号器值。
            </summary>
        </member>
        <member name="M:GHSoft.Serials.GHSerial.Flush">
            <summary>
            刷新所有序号器.
            </summary>
        </member>
        <member name="P:GHSoft.Serials.GHSerial.Instance">
            <summary>
            LogContext 的唯一实例
            </summary>
        </member>
        <member name="P:GHSoft.Serials.GHSerial.Item(System.String)">
            <summary>
            获取序号工厂
            </summary>
            <param name="name">工厂名称</param>
            <returns>序号工厂</returns>
        </member>
        <member name="T:GHSoft.Serials.SerialHandler">
            <summary>
            Serial 配置分析
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/23 14:35:32</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Serials.SerialHandler.Parse(System.Xml.XmlNode)">
            <summary>
            分析节点内容
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:GHSoft.Serials.FileSerialService">
            <summary>
            XML 存储体 序号服务
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/23 11:24:50</para>
            </remarks>
        </member>
        <member name="T:GHSoft.Serials.SerialServiceBase">
            <summary>
            序号服务基础类
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/23 10:38:19</para>
            </remarks>
        </member>
        <member name="T:GHSoft.Serials.ISerialService">
            <summary>
            序号服务接口。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/23 10:34:37</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Serials.ISerialService.Acquire">
            <summary>
            获取一个序号。
            </summary>
            <returns>新产生的序号</returns>
        </member>
        <member name="M:GHSoft.Serials.ISerialService.Acquire(System.String)">
            <summary>
            获取一个序号
            </summary>
            <param name="key">生成项索引</param>
            <returns>新产生的序号</returns>
        </member>
        <member name="M:GHSoft.Serials.ISerialService.Parse(System.Xml.XmlNode)">
            <summary>
            分析序号生成规则。
            </summary>
            <param name="node">配置节点</param>
        </member>
        <member name="M:GHSoft.Serials.ISerialService.Flush">
            <summary>
            加载存储内容，刷新生成器。
            </summary>
        </member>
        <member name="M:GHSoft.Serials.ISerialService.Flush(System.String)">
            <summary>
            加载存储内容，刷新生成器。
            </summary>
            <param name="target">目标文件</param>
        </member>
        <member name="M:GHSoft.Serials.ISerialService.Save">
            <summary>
            将序号写入存储体。
            </summary>
        </member>
        <member name="P:GHSoft.Serials.ISerialService.Format">
            <summary>
            序号规则字符串。
            </summary>
        </member>
        <member name="P:GHSoft.Serials.ISerialService.Target">
            <summary>
            序号存储目标。
            </summary>
        </member>
        <member name="P:GHSoft.Serials.ISerialService.Name">
            <summary>
            序号生成器名称。
            </summary>
        </member>
        <member name="P:GHSoft.Serials.ISerialService.CurrentRules">
            <summary>
            当前使用的规则列表。
            </summary>
        </member>
        <member name="F:GHSoft.Serials.SerialServiceBase.makeRules">
            <summary>
            当前生成序号规则列表
            </summary>
        </member>
        <member name="F:GHSoft.Serials.SerialServiceBase.rules">
            <summary>
            未使用序号生成规则列表
            </summary>
        </member>
        <member name="F:GHSoft.Serials.SerialServiceBase.saveThread">
            <summary>
            自动保存线程
            </summary>
        </member>
        <member name="M:GHSoft.Serials.SerialServiceBase.Finalize">
            <summary>
            析构，对象销毁时保存序列号存储。
            </summary>
        </member>
        <member name="M:GHSoft.Serials.SerialServiceBase.CreateRule(System.String,GHSoft.Serials.RuleItem)">
            <summary>
            创建序号规则
            </summary>
            <param name="name">规则名字</param>
            <param name="item">规则实体</param>
            <returns></returns>
        </member>
        <member name="M:GHSoft.Serials.SerialServiceBase.AutoSave">
            <summary>
            定时自动保存
            </summary>
        </member>
        <member name="M:GHSoft.Serials.SerialServiceBase.#ctor(System.Double)">
            <summary>
            序号服务基
            </summary>
            <param name="minute"></param>
        </member>
        <member name="M:GHSoft.Serials.SerialServiceBase.Acquire">
            <summary>
            获取一个序号。
            </summary>
            <returns>新产生的序号</returns>
        </member>
        <member name="M:GHSoft.Serials.SerialServiceBase.Acquire(System.String)">
            <summary>
            获取一个序号
            </summary>
            <param name="key">生成项索引</param>
            <returns>新产生的序号</returns>
        </member>
        <member name="M:GHSoft.Serials.SerialServiceBase.Parse(System.Xml.XmlNode)">
            <summary>
            分析序号生成规则
            </summary>
            <param name="node">配置节点</param>
        </member>
        <member name="M:GHSoft.Serials.SerialServiceBase.Flush">
            <summary>
            加载存储内容,刷新生成器
            </summary>
        </member>
        <member name="M:GHSoft.Serials.SerialServiceBase.Flush(System.String)">
            <summary>
            加载存储内容,刷新生成器
            </summary>
            <param name="target">目标对象名</param>
        </member>
        <member name="M:GHSoft.Serials.SerialServiceBase.Save">
            <summary>
            将序号写入存储体
            </summary>
        </member>
        <member name="P:GHSoft.Serials.SerialServiceBase.Timeout">
            <summary>
            默认的超时时间
            </summary>
        </member>
        <member name="P:GHSoft.Serials.SerialServiceBase.Format">
            <summary>
            序号规则字符串
            </summary>
        </member>
        <member name="P:GHSoft.Serials.SerialServiceBase.Name">
            <summary>
            序号生成器名称
            </summary>
        </member>
        <member name="P:GHSoft.Serials.SerialServiceBase.Target">
            <summary>
            序号存储目标
            </summary>
        </member>
        <member name="P:GHSoft.Serials.SerialServiceBase.CurrentRules">
            <summary>
            当前使用的规则列表。
            </summary>
        </member>
        <member name="P:GHSoft.Serials.SerialServiceBase.SyncRoot">
            <summary>
            获取一个可用于同步对的访问的对象。
            </summary>
        </member>
        <member name="M:GHSoft.Serials.FileSerialService.#ctor(System.Double)">
            <summary>
            序列号的数据库存储器
            </summary>
            <param name="minute"></param>
        </member>
        <member name="M:GHSoft.Serials.FileSerialService.Parse(System.Xml.XmlNode)">
            <summary>
            分析规则
            </summary>
            <param name="node">规则定义节点</param>
        </member>
        <member name="M:GHSoft.Serials.FileSerialService.Flush">
            <summary>
            加载存储内容,刷新生成器
            </summary>
        </member>
        <member name="M:GHSoft.Serials.FileSerialService.Flush(System.String)">
            <summary>
            加载存储内容,刷新生成器
            </summary>
            <param name="target">目标对象</param>
        </member>
        <member name="M:GHSoft.Serials.FileSerialService.Save">
            <summary>
            将序号写入存储体
            </summary>
        </member>
        <member name="T:GHSoft.Serials.RuleItem">
            <summary>
            规则定义体。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/23 10:15:43</para>
            </remarks>
        </member>
        <member name="P:GHSoft.Serials.RuleItem.Key">
            <summary>
            序号规则键
            </summary>
        </member>
        <member name="P:GHSoft.Serials.RuleItem.Type">
            <summary>
            序号类型。
            </summary>
        </member>
        <member name="P:GHSoft.Serials.RuleItem.Name">
            <summary>
            规则名。
            </summary>
        </member>
        <member name="P:GHSoft.Serials.RuleItem.Value">
            <summary>
            规则值。
            </summary>
        </member>
        <member name="P:GHSoft.Serials.RuleItem.StartValue">
            <summary>
            开始值。
            </summary>
        </member>
        <member name="P:GHSoft.Serials.RuleItem.MaxValue">
            <summary>
            最大值。
            </summary>
        </member>
        <member name="P:GHSoft.Serials.RuleItem.MinValue">
            <summary>
            最小值。
            </summary>
        </member>
        <member name="P:GHSoft.Serials.RuleItem.Length">
            <summary>
            值长度。
            </summary>
        </member>
        <member name="P:GHSoft.Serials.RuleItem.ZeroPad">
            <summary>
            零位补齐。
            </summary>
        </member>
        <member name="T:GHSoft.Serials.SerialHelper">
            <summary>
            序号生成方法集
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/23 10:25:49</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Serials.SerialHelper.MD5Number(GHSoft.Serials.RuleItem)">
            <summary>
            获取MD5型序号
            </summary>
            <param name="item">规则实体</param>
            <returns>序号</returns>
        </member>
        <member name="M:GHSoft.Serials.SerialHelper.MD5Prefix(GHSoft.Serials.RuleItem)">
            <summary>
            获取MD5型前缀
            </summary>
            <param name="item">规则实体</param>
            <returns>序号</returns>
        </member>
        <member name="M:GHSoft.Serials.SerialHelper.DatePrefix(GHSoft.Serials.RuleItem)">
            <summary>
            获取日期型前缀
            </summary>
            <param name="item">规则实体</param>
            <returns>序号</returns>
        </member>
        <member name="M:GHSoft.Serials.SerialHelper.NumberSerial(GHSoft.Serials.RuleItem)">
            <summary>
            获取数字序号
            </summary>
            <param name="item">规则实体</param>
            <returns>序号</returns>
        </member>
        <member name="M:GHSoft.Serials.SerialHelper.RandSerial(GHSoft.Serials.RuleItem)">
            <summary>
            获取随机数字序号
            </summary>
            <param name="item">规则实体</param>
            <returns>序号</returns>
        </member>
        <member name="M:GHSoft.Serials.SerialHelper.HexSerial(GHSoft.Serials.RuleItem)">
            <summary>
            获取十六进制序号
            </summary>
            <param name="item">规则实体</param>
            <returns>序号</returns>
        </member>
        <member name="T:GHSoft.Serials.SerialRule">
            <summary>
            表示一个序号规则。
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/23 10:21:21</para>
            </remarks>
        </member>
        <member name="P:GHSoft.Serials.SerialRule.FuncType">
            <summary>
            序号功能类型
            </summary>
        </member>
        <member name="P:GHSoft.Serials.SerialRule.Function">
            <summary>
            序号功能函数
            </summary>
        </member>
        <member name="P:GHSoft.Serials.SerialRule.Rule">
            <summary>
            序号规则实体
            </summary>
        </member>
        <member name="P:GHSoft.Serials.SerialRule.Name">
            <summary>
            序号规则名称
            </summary>
        </member>
        <member name="P:GHSoft.Serials.SerialRule.Type">
            <summary>
            序号规则类型
            </summary>
        </member>
        <member name="T:GHSoft.Serials.XmlSerialService">
            <summary>
            XML 存储体 序号服务
            </summary>
            <remarks>
                <para>作    者：Lally</para>
                <para>创建时间：2012/4/23 11:59:09</para>
            </remarks>
        </member>
        <member name="M:GHSoft.Serials.XmlSerialService.#ctor(System.Double)">
            <summary>
            序列号的数据库存储器
            </summary>
            <param name="minute"></param>
        </member>
        <member name="M:GHSoft.Serials.XmlSerialService.Parse(System.Xml.XmlNode)">
            <summary>
            分析规则
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:GHSoft.Serials.XmlSerialService.Flush">
            <summary>
            加载存储内容,刷新生成器
            </summary>
        </member>
        <member name="M:GHSoft.Serials.XmlSerialService.Flush(System.String)">
            <summary>
            加载存储内容,刷新生成器
            </summary>
            <param name="target">目标对象</param>
        </member>
        <member name="M:GHSoft.Serials.XmlSerialService.Save">
            <summary>
            将序号写入存储体
            </summary>
        </member>
    </members>
</doc>
